{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Setup/SetupPlayerType.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { MetaButton, MetaHeading, SimpleGrid, Text, useToast } from '@raidguild/ds';\nimport { FlexContainer } from 'components/Container';\nimport { useSetupFlow } from 'contexts/SetupContext';\nimport { useUpdateAboutYouMutation } from 'graphql/autogen/types';\nimport { useUser } from 'lib/hooks';\nimport React, { useState } from 'react';\nexport var SetupPlayerType = function SetupPlayerType(_ref) {\n  _s();\n\n  var playerTypeChoices = _ref.playerTypeChoices,\n      playerType = _ref.playerType,\n      setPlayerType = _ref.setPlayerType;\n\n  var _useSetupFlow = useSetupFlow(),\n      onNextPress = _useSetupFlow.onNextPress,\n      nextButtonLabel = _useSetupFlow.nextButtonLabel;\n\n  var _useUser = useUser({\n    redirectTo: '/'\n  }),\n      user = _useUser.user;\n\n  var toast = useToast();\n\n  var _useUpdateAboutYouMut = useUpdateAboutYouMutation(),\n      _useUpdateAboutYouMut2 = _slicedToArray(_useUpdateAboutYouMut, 2),\n      updateAboutYouRes = _useUpdateAboutYouMut2[0],\n      updateAboutYou = _useUpdateAboutYouMut2[1];\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var handleNextPress = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _user$player, _user$player$playerTy;\n\n      var _yield$updateAboutYou, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (user) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              setLoading(true);\n\n              if (!(((_user$player = user.player) === null || _user$player === void 0 ? void 0 : (_user$player$playerTy = _user$player.playerType) === null || _user$player$playerTy === void 0 ? void 0 : _user$player$playerTy.id) !== (playerType === null || playerType === void 0 ? void 0 : playerType.id))) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 6;\n              return updateAboutYou({\n                playerId: user.id,\n                input: {\n                  player_type_id: playerType === null || playerType === void 0 ? void 0 : playerType.id\n                }\n              });\n\n            case 6:\n              _yield$updateAboutYou = _context.sent;\n              error = _yield$updateAboutYou.error;\n\n              if (!error) {\n                _context.next = 12;\n                break;\n              }\n\n              toast({\n                title: 'Error',\n                description: 'Unable to update player type. The octo is sad ðŸ˜¢',\n                status: 'error',\n                isClosable: true\n              });\n              setLoading(false);\n              return _context.abrupt(\"return\");\n\n            case 12:\n              onNextPress();\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleNextPress() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(FlexContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(MetaHeading, {\n    mb: 5,\n    textAlign: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Player Type\"), __jsx(Text, {\n    mb: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Please read the features of each player type below. And select the one that suits you best.\"), __jsx(SimpleGrid, {\n    columns: [1, null, 3, 3],\n    spacing: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, playerTypeChoices.map(function (p) {\n    return __jsx(FlexContainer, {\n      key: p.id,\n      p: [4, null, 6],\n      bgColor: playerType && playerType.id === p.id ? 'purpleBoxDark' : 'purpleBoxLight',\n      borderRadius: \"0.5rem\",\n      _hover: {\n        bgColor: 'purpleBoxDark'\n      },\n      transition: \"background 0.25s\",\n      cursor: \"pointer\",\n      onClick: function onClick() {\n        return setPlayerType(p);\n      },\n      align: \"stretch\",\n      justify: \"flex-start\",\n      border: \"2px\",\n      borderColor: playerType && playerType.id === p.id ? 'purple.400' : 'transparent',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, __jsx(Text, {\n      color: \"white\",\n      fontWeight: \"bold\",\n      mb: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, p.title), __jsx(Text, {\n      color: \"blueLight\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, p.description));\n  })), __jsx(MetaButton, {\n    onClick: handleNextPress,\n    mt: 10,\n    isDisabled: !playerType,\n    isLoading: updateAboutYouRes.fetching || loading,\n    loadingText: \"Saving\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, nextButtonLabel));\n};\n\n_s(SetupPlayerType, \"V95NuZLGvJQekG20JCH+7AdFiOM=\", false, function () {\n  return [useSetupFlow, useUser, useToast, useUpdateAboutYouMutation];\n});\n\n_c = SetupPlayerType;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetupPlayerType\");","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Setup/SetupPlayerType.tsx"],"names":["MetaButton","MetaHeading","SimpleGrid","Text","useToast","FlexContainer","useSetupFlow","useUpdateAboutYouMutation","useUser","React","useState","SetupPlayerType","playerTypeChoices","playerType","setPlayerType","onNextPress","nextButtonLabel","redirectTo","user","toast","updateAboutYouRes","updateAboutYou","loading","setLoading","handleNextPress","player","id","playerId","input","player_type_id","error","title","description","status","isClosable","map","p","bgColor","fetching"],"mappings":"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","sourcesContent":["import {\n  MetaButton,\n  MetaHeading,\n  SimpleGrid,\n  Text,\n  useToast,\n} from '@raidguild/ds';\nimport { FlexContainer } from 'components/Container';\nimport { useSetupFlow } from 'contexts/SetupContext';\nimport { Player_Type, useUpdateAboutYouMutation } from 'graphql/autogen/types';\nimport { useUser } from 'lib/hooks';\nimport React, { useState } from 'react';\n\nexport type SetupPlayerTypeProps = {\n  playerTypeChoices: Array<Player_Type>;\n  playerType: Player_Type | undefined;\n  setPlayerType: React.Dispatch<React.SetStateAction<Player_Type | undefined>>;\n};\n\nexport const SetupPlayerType: React.FC<SetupPlayerTypeProps> = ({\n  playerTypeChoices,\n  playerType,\n  setPlayerType,\n}) => {\n  const { onNextPress, nextButtonLabel } = useSetupFlow();\n  const { user } = useUser({ redirectTo: '/' });\n  const toast = useToast();\n\n  const [updateAboutYouRes, updateAboutYou] = useUpdateAboutYouMutation();\n  const [loading, setLoading] = useState(false);\n\n  const handleNextPress = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    if (user.player?.playerType?.id !== playerType?.id) {\n      const { error } = await updateAboutYou({\n        playerId: user.id,\n        input: {\n          player_type_id: playerType?.id,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: 'Error',\n          description: 'Unable to update player type. The octo is sad ðŸ˜¢',\n          status: 'error',\n          isClosable: true,\n        });\n        setLoading(false);\n        return;\n      }\n    }\n\n    onNextPress();\n  };\n\n  return (\n    <FlexContainer>\n      <MetaHeading mb={5} textAlign=\"center\">\n        Player Type\n      </MetaHeading>\n      <Text mb={10}>\n        Please read the features of each player type below. And select the one\n        that suits you best.\n      </Text>\n      <SimpleGrid columns={[1, null, 3, 3]} spacing={4}>\n        {playerTypeChoices.map((p) => (\n          <FlexContainer\n            key={p.id}\n            p={[4, null, 6]}\n            bgColor={\n              playerType && playerType.id === p.id\n                ? 'purpleBoxDark'\n                : 'purpleBoxLight'\n            }\n            borderRadius=\"0.5rem\"\n            _hover={{ bgColor: 'purpleBoxDark' }}\n            transition=\"background 0.25s\"\n            cursor=\"pointer\"\n            onClick={() => setPlayerType(p)}\n            align=\"stretch\"\n            justify=\"flex-start\"\n            border=\"2px\"\n            borderColor={\n              playerType && playerType.id === p.id\n                ? 'purple.400'\n                : 'transparent'\n            }\n          >\n            <Text color=\"white\" fontWeight=\"bold\" mb={4}>\n              {p.title}\n            </Text>\n            <Text color=\"blueLight\">{p.description}</Text>\n          </FlexContainer>\n        ))}\n      </SimpleGrid>\n\n      <MetaButton\n        onClick={handleNextPress}\n        mt={10}\n        isDisabled={!playerType}\n        isLoading={updateAboutYouRes.fetching || loading}\n        loadingText=\"Saving\"\n      >\n        {nextButtonLabel}\n      </MetaButton>\n    </FlexContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}