{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/contexts/Web3Context.tsx\";\nvar __jsx = React.createElement;\nimport { did } from '@raidguild/utils';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport { providers } from 'ethers';\nimport { clearToken, clearWalletConnect, getTokenFromStore, setTokenInStore } from 'lib/auth';\nimport React, { createContext, useCallback, useEffect, useRef, useState } from 'react';\nimport Web3Modal from 'web3modal';\nimport { CONFIG } from '../config';\nexport const Web3Context = /*#__PURE__*/createContext({\n  provider: null,\n  connectWeb3: async () => {},\n  disconnect: () => undefined,\n  isConnecting: false,\n  isConnected: false,\n  address: null,\n  authToken: null\n});\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: CONFIG.infuraId\n    }\n  }\n};\nconst web3Modal = false && new Web3Modal({\n  network: 'mainnet',\n  cacheProvider: true,\n  providerOptions\n});\n\nasync function getExistingAuth(ethersProvider) {\n  const token = getTokenFromStore();\n  if (!token) return null;\n\n  try {\n    await did.verifyToken(token, ethersProvider);\n    return token;\n  } catch (e) {\n    clearToken();\n    return null;\n  }\n}\n\nasync function authenticateWallet(ethersProvider) {\n  const token = await did.createToken(ethersProvider);\n  setTokenInStore(token);\n  return token;\n}\n\nexport const Web3ContextProvider = ({\n  children,\n  resetUrqlClient\n}) => {\n  const {\n    0: provider,\n    1: setProvider\n  } = useState(null);\n  const {\n    0: isConnected,\n    1: setIsConnected\n  } = useState(false);\n  const {\n    0: isConnecting,\n    1: setIsConnecting\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(null);\n  const {\n    0: authToken,\n    1: setAuthToken\n  } = useState(null);\n  const calledOnce = useRef(false);\n  const disconnect = useCallback(() => {\n    if (web3Modal === false) return;\n    web3Modal.clearCachedProvider();\n    clearWalletConnect();\n    clearToken();\n    setAuthToken(null);\n    setAddress(null);\n    setProvider(null);\n    setIsConnecting(false);\n    setIsConnected(false);\n    if (resetUrqlClient) resetUrqlClient();\n  }, [resetUrqlClient]);\n  const connectWeb3 = useCallback(async () => {\n    if (web3Modal === false) return;\n    setIsConnecting(true);\n\n    try {\n      const web3Provider = await web3Modal.connect();\n      const ethersProvider = new providers.Web3Provider(web3Provider);\n      const ethAddress = await ethersProvider.getSigner().getAddress();\n      let token = await getExistingAuth(ethersProvider);\n\n      if (!token) {\n        token = await authenticateWallet(ethersProvider);\n      }\n\n      setAddress(ethAddress);\n      setProvider(ethersProvider);\n      setAuthToken(token);\n      setIsConnecting(false);\n      setIsConnected(true);\n      if (resetUrqlClient) resetUrqlClient();\n    } catch (error) {\n      console.log(error); // eslint-disable-line no-console\n\n      setIsConnecting(false);\n      disconnect();\n    }\n  }, [resetUrqlClient, disconnect]);\n  useEffect(() => {\n    if (calledOnce.current) return;\n    calledOnce.current = true;\n    if (web3Modal === false) return;\n\n    if (web3Modal.cachedProvider) {\n      connectWeb3().catch(() => undefined);\n    }\n  }, [connectWeb3]);\n  return __jsx(Web3Context.Provider, {\n    value: {\n      provider,\n      connectWeb3,\n      disconnect,\n      isConnected,\n      isConnecting,\n      address,\n      authToken\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/contexts/Web3Context.tsx"],"names":["did","WalletConnectProvider","providers","clearToken","clearWalletConnect","getTokenFromStore","setTokenInStore","React","createContext","useCallback","useEffect","useRef","useState","Web3Modal","CONFIG","Web3Context","provider","connectWeb3","disconnect","undefined","isConnecting","isConnected","address","authToken","providerOptions","walletconnect","package","options","infuraId","web3Modal","network","cacheProvider","getExistingAuth","ethersProvider","token","verifyToken","e","authenticateWallet","createToken","Web3ContextProvider","children","resetUrqlClient","setProvider","setIsConnected","setIsConnecting","setAddress","setAuthToken","calledOnce","clearCachedProvider","web3Provider","connect","Web3Provider","ethAddress","getSigner","getAddress","error","console","log","current","cachedProvider","catch"],"mappings":"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","sourcesContent":["import { did } from '@raidguild/utils';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport { providers } from 'ethers';\nimport {\n  clearToken,\n  clearWalletConnect,\n  getTokenFromStore,\n  setTokenInStore,\n} from 'lib/auth';\nimport React, {\n  createContext,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport Web3Modal from 'web3modal';\n\nimport { CONFIG } from '../config';\n\nexport type Web3ContextType = {\n  provider: providers.Web3Provider | null;\n  connectWeb3: () => Promise<void>;\n  disconnect: () => void;\n  isConnecting: boolean;\n  isConnected: boolean;\n  address: string | null;\n  authToken: string | null;\n};\n\nexport const Web3Context = createContext<Web3ContextType>({\n  provider: null,\n  connectWeb3: async () => {},\n  disconnect: () => undefined,\n  isConnecting: false,\n  isConnected: false,\n  address: null,\n  authToken: null,\n});\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: CONFIG.infuraId,\n    },\n  },\n};\n\nconst web3Modal =\n  typeof window !== 'undefined' &&\n  new Web3Modal({\n    network: 'mainnet',\n    cacheProvider: true,\n    providerOptions,\n  });\n\nasync function getExistingAuth(\n  ethersProvider: providers.Web3Provider,\n): Promise<string | null> {\n  const token = getTokenFromStore();\n  if (!token) return null;\n\n  try {\n    await did.verifyToken(token, ethersProvider);\n    return token;\n  } catch (e) {\n    clearToken();\n    return null;\n  }\n}\n\nasync function authenticateWallet(\n  ethersProvider: providers.Web3Provider,\n): Promise<string> {\n  const token = await did.createToken(ethersProvider);\n  setTokenInStore(token);\n  return token;\n}\n\ninterface Web3ContextProviderOptions {\n  children: React.ReactElement;\n  resetUrqlClient?: () => void;\n}\n\nexport const Web3ContextProvider: React.FC<Web3ContextProviderOptions> = ({\n  children,\n  resetUrqlClient,\n}) => {\n  const [provider, setProvider] = useState<providers.Web3Provider | null>(null);\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [isConnecting, setIsConnecting] = useState<boolean>(false);\n  const [address, setAddress] = useState<string | null>(null);\n  const [authToken, setAuthToken] = useState<string | null>(null);\n  const calledOnce = useRef<boolean>(false);\n\n  const disconnect = useCallback(() => {\n    if (web3Modal === false) return;\n\n    web3Modal.clearCachedProvider();\n    clearWalletConnect();\n    clearToken();\n    setAuthToken(null);\n    setAddress(null);\n    setProvider(null);\n    setIsConnecting(false);\n    setIsConnected(false);\n    if (resetUrqlClient) resetUrqlClient();\n  }, [resetUrqlClient]);\n\n  const connectWeb3 = useCallback(async () => {\n    if (web3Modal === false) return;\n    setIsConnecting(true);\n\n    try {\n      const web3Provider = await web3Modal.connect();\n      const ethersProvider = new providers.Web3Provider(web3Provider);\n\n      const ethAddress = await ethersProvider.getSigner().getAddress();\n\n      let token: string | null = await getExistingAuth(ethersProvider);\n      if (!token) {\n        token = await authenticateWallet(ethersProvider);\n      }\n\n      setAddress(ethAddress);\n      setProvider(ethersProvider);\n      setAuthToken(token);\n      setIsConnecting(false);\n      setIsConnected(true);\n      if (resetUrqlClient) resetUrqlClient();\n    } catch (error) {\n      console.log(error); // eslint-disable-line no-console\n      setIsConnecting(false);\n      disconnect();\n    }\n  }, [resetUrqlClient, disconnect]);\n\n  useEffect(() => {\n    if (calledOnce.current) return;\n    calledOnce.current = true;\n\n    if (web3Modal === false) return;\n    if (web3Modal.cachedProvider) {\n      connectWeb3().catch(() => undefined);\n    }\n  }, [connectWeb3]);\n\n  return (\n    <Web3Context.Provider\n      value={{\n        provider,\n        connectWeb3,\n        disconnect,\n        isConnected,\n        isConnecting,\n        address,\n        authToken,\n      }}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}