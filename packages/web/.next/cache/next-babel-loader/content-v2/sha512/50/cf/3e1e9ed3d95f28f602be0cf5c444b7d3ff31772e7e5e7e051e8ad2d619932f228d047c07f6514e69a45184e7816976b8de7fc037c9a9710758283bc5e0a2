{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/pages/players.tsx\";\nvar __jsx = React.createElement;\nimport { LoadingState, Text, VStack } from '@raidguild/ds';\nimport { PageContainer } from 'components/Container';\nimport { AdjascentTimezonePlayers } from 'components/Player/Filter/AdjascentTimezonePlayers';\nimport { PlayerFilter } from 'components/Player/Filter/PlayerFilter';\nimport { PlayersNotFound } from 'components/Player/Filter/PlayersNotFound';\nimport { PlayerList } from 'components/Player/PlayerList';\nimport { HeadComponent } from 'components/Seo';\nimport { getSsrClient } from 'graphql/client';\nimport { getPlayerFilters, getPlayersWithCount } from 'graphql/getPlayers';\nimport { usePlayerFilter } from 'lib/hooks/players';\nimport { useOnScreen } from 'lib/hooks/useOnScreen';\nimport React, { useEffect, useMemo, useRef } from 'react';\nexport const getStaticProps = async () => {\n  const [ssrClient, ssrCache] = getSsrClient(); // This populates the cache server-side\n\n  const {\n    error\n  } = await getPlayersWithCount(undefined, ssrClient);\n\n  if (error) {\n    // eslint-disable-next-line no-console\n    console.error('getPlayers error', error);\n  }\n\n  await getPlayerFilters(ssrClient);\n  return {\n    props: {\n      urqlState: ssrCache.extractData()\n    },\n    revalidate: 1\n  };\n};\n\nconst Players = () => {\n  const {\n    players,\n    aggregates,\n    fetching,\n    fetchingMore,\n    error,\n    queryVariables,\n    setQueryVariable,\n    resetFilter,\n    totalCount,\n    nextPage,\n    moreAvailable\n  } = usePlayerFilter();\n  const moreRef = useRef(null);\n  const onScreen = useOnScreen(moreRef);\n  useEffect(() => {\n    if (onScreen && !fetching && !fetchingMore && moreAvailable) {\n      nextPage();\n    }\n  }, [nextPage, onScreen, fetching, fetchingMore, moreAvailable]);\n  const isLoading = useMemo(() => fetching || fetchingMore || moreAvailable, [fetching, fetchingMore, moreAvailable]);\n  return __jsx(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(HeadComponent, {\n    url: \"https://my.metagame.wtf/players\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), __jsx(VStack, {\n    w: \"100%\",\n    spacing: {\n      base: '4',\n      md: '8'\n    },\n    pb: {\n      base: '16',\n      lg: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(PlayerFilter, {\n    fetching: fetching,\n    fetchingMore: fetchingMore,\n    aggregates: aggregates,\n    queryVariables: queryVariables,\n    setQueryVariable: setQueryVariable,\n    resetFilter: resetFilter,\n    totalCount: totalCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), error ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 18\n    }\n  }, `Error: ${error.message}`) : null, !error && players.length && (fetchingMore || !fetching) ? __jsx(PlayerList, {\n    players: players,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }) : null, __jsx(MorePlayers, {\n    ref: moreRef,\n    fetching: isLoading,\n    totalCount: totalCount,\n    queryVariables: queryVariables,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Players;\nconst MorePlayers = /*#__PURE__*/React.forwardRef(({\n  fetching,\n  totalCount,\n  queryVariables\n}, ref) => {\n  const isTimezoneSelected = useMemo(() => queryVariables.timezones && queryVariables.timezones.length > 0, [queryVariables]);\n  return __jsx(VStack, {\n    w: \"100%\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, fetching ? __jsx(LoadingState, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }) : null, !fetching && !isTimezoneSelected && totalCount > 0 ? __jsx(Text, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"No more players available.\") : null, !fetching && totalCount === 0 ? __jsx(PlayersNotFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 42\n    }\n  }) : null, !fetching && isTimezoneSelected ? __jsx(AdjascentTimezonePlayers, {\n    queryVariables: queryVariables,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }) : null);\n});","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/pages/players.tsx"],"names":["LoadingState","Text","VStack","PageContainer","AdjascentTimezonePlayers","PlayerFilter","PlayersNotFound","PlayerList","HeadComponent","getSsrClient","getPlayerFilters","getPlayersWithCount","usePlayerFilter","useOnScreen","React","useEffect","useMemo","useRef","getStaticProps","ssrClient","ssrCache","error","undefined","console","props","urqlState","extractData","revalidate","Players","players","aggregates","fetching","fetchingMore","queryVariables","setQueryVariable","resetFilter","totalCount","nextPage","moreAvailable","moreRef","onScreen","isLoading","base","md","lg","message","length","MorePlayers","forwardRef","ref","isTimezoneSelected","timezones"],"mappings":"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","sourcesContent":["import { LoadingState, Text, VStack } from '@raidguild/ds';\nimport { PageContainer } from 'components/Container';\nimport { AdjascentTimezonePlayers } from 'components/Player/Filter/AdjascentTimezonePlayers';\nimport { PlayerFilter } from 'components/Player/Filter/PlayerFilter';\nimport { PlayersNotFound } from 'components/Player/Filter/PlayersNotFound';\nimport { PlayerList } from 'components/Player/PlayerList';\nimport { HeadComponent } from 'components/Seo';\nimport { GetPlayersQueryVariables } from 'graphql/autogen/types';\nimport { getSsrClient } from 'graphql/client';\nimport { getPlayerFilters, getPlayersWithCount } from 'graphql/getPlayers';\nimport { usePlayerFilter } from 'lib/hooks/players';\nimport { useOnScreen } from 'lib/hooks/useOnScreen';\nimport { InferGetStaticPropsType } from 'next';\nimport React, { useEffect, useMemo, useRef } from 'react';\n\ntype Props = InferGetStaticPropsType<typeof getStaticProps>;\n\nexport const getStaticProps = async () => {\n  const [ssrClient, ssrCache] = getSsrClient();\n\n  // This populates the cache server-side\n  const { error } = await getPlayersWithCount(undefined, ssrClient);\n  if (error) {\n    // eslint-disable-next-line no-console\n    console.error('getPlayers error', error);\n  }\n  await getPlayerFilters(ssrClient);\n\n  return {\n    props: {\n      urqlState: ssrCache.extractData(),\n    },\n    revalidate: 1,\n  };\n};\n\nconst Players: React.FC<Props> = () => {\n  const {\n    players,\n    aggregates,\n    fetching,\n    fetchingMore,\n    error,\n    queryVariables,\n    setQueryVariable,\n    resetFilter,\n    totalCount,\n    nextPage,\n    moreAvailable,\n  } = usePlayerFilter();\n\n  const moreRef = useRef<HTMLDivElement>(null);\n\n  const onScreen = useOnScreen(moreRef);\n\n  useEffect(() => {\n    if (onScreen && !fetching && !fetchingMore && moreAvailable) {\n      nextPage();\n    }\n  }, [nextPage, onScreen, fetching, fetchingMore, moreAvailable]);\n\n  const isLoading = useMemo(() => fetching || fetchingMore || moreAvailable, [\n    fetching,\n    fetchingMore,\n    moreAvailable,\n  ]);\n\n  return (\n    <PageContainer>\n      <HeadComponent url=\"https://my.metagame.wtf/players\" />\n      <VStack\n        w=\"100%\"\n        spacing={{ base: '4', md: '8' }}\n        pb={{ base: '16', lg: '0' }}\n      >\n        <PlayerFilter\n          fetching={fetching}\n          fetchingMore={fetchingMore}\n          aggregates={aggregates}\n          queryVariables={queryVariables}\n          setQueryVariable={setQueryVariable}\n          resetFilter={resetFilter}\n          totalCount={totalCount}\n        />\n        {error ? <Text>{`Error: ${error.message}`}</Text> : null}\n        {!error && players.length && (fetchingMore || !fetching) ? (\n          <PlayerList players={players} />\n        ) : null}\n        <MorePlayers\n          ref={moreRef}\n          fetching={isLoading}\n          totalCount={totalCount}\n          queryVariables={queryVariables}\n        />\n      </VStack>\n    </PageContainer>\n  );\n};\n\nexport default Players;\n\ntype MorePlayersProps = {\n  fetching: boolean;\n  totalCount: number;\n  queryVariables: GetPlayersQueryVariables;\n};\n\nconst MorePlayers = React.forwardRef<HTMLDivElement, MorePlayersProps>(\n  ({ fetching, totalCount, queryVariables }, ref) => {\n    const isTimezoneSelected = useMemo(\n      () => queryVariables.timezones && queryVariables.timezones.length > 0,\n      [queryVariables],\n    );\n\n    return (\n      <VStack w=\"100%\" ref={ref}>\n        {fetching ? <LoadingState color=\"white\" /> : null}\n        {!fetching && !isTimezoneSelected && totalCount > 0 ? (\n          <Text color=\"white\">No more players available.</Text>\n        ) : null}\n        {!fetching && totalCount === 0 ? <PlayersNotFound /> : null}\n        {!fetching && isTimezoneSelected ? (\n          <AdjascentTimezonePlayers queryVariables={queryVariables} />\n        ) : null}\n      </VStack>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}