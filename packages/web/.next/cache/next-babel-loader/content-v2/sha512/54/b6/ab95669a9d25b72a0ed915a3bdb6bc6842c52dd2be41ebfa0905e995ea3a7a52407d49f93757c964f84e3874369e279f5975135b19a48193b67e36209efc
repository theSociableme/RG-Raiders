{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/Filter/DesktopFilters.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MetaFilterSelectSearch, MetaTheme, selectStyles, TimezoneOptions, Wrap, WrapItem } from '@raidguild/ds';\nimport { SkillColors } from 'graphql/types';\nimport { useIsSticky } from 'lib/hooks/useIsSticky';\nimport React, { useRef } from 'react';\n\nconst styles = _objectSpread(_objectSpread({}, selectStyles), {}, {\n  multiValue: (s, {\n    data\n  }) => _objectSpread(_objectSpread({}, s), {}, {\n    background: SkillColors[data.category],\n    color: MetaTheme.colors.white\n  }),\n  multiValueLabel: (s, {\n    data\n  }) => _objectSpread(_objectSpread({}, s), {}, {\n    background: SkillColors[data.category],\n    color: MetaTheme.colors.white\n  }),\n  groupHeading: (s, {\n    children\n  }) => _objectSpread(_objectSpread(_objectSpread({}, s), selectStyles.groupHeading && selectStyles.groupHeading(s, {\n    children\n  })), {}, {\n    background: SkillColors[children],\n    borderTop: `1px solid ${MetaTheme.colors.borderPurple}`,\n    margin: 0\n  }),\n  option: (s, {\n    isSelected\n  }) => _objectSpread(_objectSpread({}, s), {}, {\n    backgroundColor: 'transparent',\n    fontWeight: isSelected ? 'bold' : 'normal',\n    ':hover': {\n      backgroundColor: 'transparent',\n      color: MetaTheme.colors.white\n    },\n    ':focus': {\n      boxShadow: '0 0 0 3px rgba(66, 153, 225, 0.6)'\n    }\n  }),\n  menu: () => ({}),\n  control: s => _objectSpread(_objectSpread({}, s), {}, {\n    background: MetaTheme.colors.dark,\n    border: 'none',\n    ':hover': {}\n  }),\n  noOptionsMessage: s => _objectSpread(_objectSpread({}, s), {}, {\n    borderTop: `1px solid ${MetaTheme.colors.borderPurple}`\n  })\n});\n\nexport const DesktopFilters = (_ref) => {\n  let {\n    aggregates,\n    skills,\n    setSkills,\n    playerTypes,\n    setPlayerTypes,\n    timezones,\n    setTimezones,\n    availability,\n    setAvailability\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"aggregates\", \"skills\", \"setSkills\", \"playerTypes\", \"setPlayerTypes\", \"timezones\", \"setTimezones\", \"availability\", \"setAvailability\"]);\n\n  const filterRef = useRef(null);\n  const isSticky = useIsSticky(filterRef);\n  return __jsx(Wrap, _extends({\n    transition: \"all 0.25s\",\n    py: \"6\",\n    style: {\n      backdropFilter: 'blur(7px)'\n    },\n    ref: filterRef,\n    position: \"sticky\",\n    top: \"-1px\",\n    borderTop: \"1px solid transparent\",\n    zIndex: \"1\",\n    justifyContent: \"center\",\n    w: isSticky ? 'calc(100% + 6rem)' : '100%',\n    maxW: isSticky ? 'auto' : '79rem',\n    bg: isSticky ? 'purpleTag70' : 'whiteAlpha.200',\n    px: isSticky ? '4.5rem' : '1.5rem',\n    borderRadius: isSticky ? '0px' : '6px'\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }), __jsx(WrapItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(MetaFilterSelectSearch, {\n    title: \"Type Of Player\",\n    styles: styles,\n    value: playerTypes,\n    onChange: value => {\n      setPlayerTypes(value);\n    },\n    options: aggregates.playerTypes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  })), __jsx(WrapItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, __jsx(MetaFilterSelectSearch, {\n    title: \"Skills\",\n    styles: styles,\n    value: skills,\n    onChange: value => {\n      setSkills(value);\n    },\n    options: aggregates.skillChoices,\n    showSearch: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })), __jsx(WrapItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, __jsx(MetaFilterSelectSearch, {\n    title: \"Availability\",\n    styles: styles,\n    value: availability ? [availability] : [],\n    onChange: value => {\n      const values = value;\n      setAvailability(values[values.length - 1]);\n    },\n    options: [1, 5, 10, 20, 30, 40].map(value => ({\n      value: value.toString(),\n      label: `> ${value.toString()} h/week`\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  })), __jsx(WrapItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, __jsx(MetaFilterSelectSearch, {\n    title: \"Time Zone\",\n    styles: styles,\n    value: timezones,\n    onChange: value => {\n      const values = value;\n      setTimezones(values.slice(-1));\n    },\n    options: TimezoneOptions,\n    showSearch: true,\n    isTimezone: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/Filter/DesktopFilters.tsx"],"names":["MetaFilterSelectSearch","MetaTheme","selectStyles","TimezoneOptions","Wrap","WrapItem","SkillColors","useIsSticky","React","useRef","styles","multiValue","s","data","background","category","color","colors","white","multiValueLabel","groupHeading","children","borderTop","borderPurple","margin","option","isSelected","backgroundColor","fontWeight","boxShadow","menu","control","dark","border","noOptionsMessage","DesktopFilters","aggregates","skills","setSkills","playerTypes","setPlayerTypes","timezones","setTimezones","availability","setAvailability","props","filterRef","isSticky","backdropFilter","value","skillChoices","values","length","map","toString","label","slice"],"mappings":"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","sourcesContent":["import {\n  MetaFilterSelectSearch,\n  MetaTheme,\n  selectStyles,\n  TimezoneOptions,\n  Wrap,\n  WrapItem,\n  WrapProps,\n} from '@raidguild/ds';\nimport { SkillCategory_Enum } from 'graphql/autogen/types';\nimport { SkillColors } from 'graphql/types';\nimport { PlayerAggregates } from 'lib/hooks/players';\nimport { useIsSticky } from 'lib/hooks/useIsSticky';\nimport React, { useRef } from 'react';\nimport { SkillOption } from 'utils/skillHelpers';\n\ntype ValueType = { value: string; label: string };\n\nconst styles: typeof selectStyles = {\n  ...selectStyles,\n  multiValue: (s, { data }) => ({\n    ...s,\n    background: SkillColors[data.category as SkillCategory_Enum],\n    color: MetaTheme.colors.white,\n  }),\n  multiValueLabel: (s, { data }) => ({\n    ...s,\n    background: SkillColors[data.category as SkillCategory_Enum],\n    color: MetaTheme.colors.white,\n  }),\n  groupHeading: (s, { children }) => ({\n    ...s,\n    ...(selectStyles.groupHeading &&\n      selectStyles.groupHeading(s, { children })),\n    background: SkillColors[children as SkillCategory_Enum],\n    borderTop: `1px solid ${MetaTheme.colors.borderPurple}`,\n    margin: 0,\n  }),\n  option: (s, { isSelected }) => ({\n    ...s,\n    backgroundColor: 'transparent',\n    fontWeight: isSelected ? 'bold' : 'normal',\n    ':hover': {\n      backgroundColor: 'transparent',\n      color: MetaTheme.colors.white,\n    },\n    ':focus': {\n      boxShadow: '0 0 0 3px rgba(66, 153, 225, 0.6)',\n    },\n  }),\n  menu: () => ({}),\n  control: (s) => ({\n    ...s,\n    background: MetaTheme.colors.dark,\n    border: 'none',\n    ':hover': {},\n  }),\n  noOptionsMessage: (s) => ({\n    ...s,\n    borderTop: `1px solid ${MetaTheme.colors.borderPurple}`,\n  }),\n};\n\ntype Props = {\n  aggregates: PlayerAggregates;\n  skills: SkillOption[];\n  setSkills: React.Dispatch<React.SetStateAction<SkillOption[]>>;\n  playerTypes: ValueType[];\n  setPlayerTypes: React.Dispatch<React.SetStateAction<ValueType[]>>;\n  timezones: ValueType[];\n  setTimezones: React.Dispatch<React.SetStateAction<ValueType[]>>;\n  availability: ValueType | null;\n  setAvailability: React.Dispatch<React.SetStateAction<ValueType | null>>;\n} & WrapProps;\n\nexport const DesktopFilters: React.FC<Props> = ({\n  aggregates,\n  skills,\n  setSkills,\n  playerTypes,\n  setPlayerTypes,\n  timezones,\n  setTimezones,\n  availability,\n  setAvailability,\n  ...props\n}) => {\n  const filterRef = useRef<HTMLDivElement>(null);\n  const isSticky = useIsSticky(filterRef);\n\n  return (\n    <Wrap\n      transition=\"all 0.25s\"\n      py=\"6\"\n      style={{ backdropFilter: 'blur(7px)' }}\n      ref={filterRef}\n      position=\"sticky\"\n      top=\"-1px\"\n      borderTop=\"1px solid transparent\"\n      zIndex=\"1\"\n      justifyContent=\"center\"\n      w={isSticky ? 'calc(100% + 6rem)' : '100%'}\n      maxW={isSticky ? 'auto' : '79rem'}\n      bg={isSticky ? 'purpleTag70' : 'whiteAlpha.200'}\n      px={isSticky ? '4.5rem' : '1.5rem'}\n      borderRadius={isSticky ? '0px' : '6px'}\n      {...props}\n    >\n      <WrapItem>\n        <MetaFilterSelectSearch\n          title=\"Type Of Player\"\n          styles={styles}\n          value={playerTypes}\n          onChange={(value) => {\n            setPlayerTypes(value as ValueType[]);\n          }}\n          options={aggregates.playerTypes}\n        />\n      </WrapItem>\n      <WrapItem>\n        <MetaFilterSelectSearch\n          title=\"Skills\"\n          styles={styles}\n          value={skills}\n          onChange={(value) => {\n            setSkills(value as SkillOption[]);\n          }}\n          options={aggregates.skillChoices}\n          showSearch\n        />\n      </WrapItem>\n      <WrapItem>\n        <MetaFilterSelectSearch\n          title=\"Availability\"\n          styles={styles}\n          value={availability ? [availability] : []}\n          onChange={(value) => {\n            const values = value as ValueType[];\n            setAvailability(values[values.length - 1]);\n          }}\n          options={[1, 5, 10, 20, 30, 40].map((value) => ({\n            value: value.toString(),\n            label: `> ${value.toString()} h/week`,\n          }))}\n        />\n      </WrapItem>\n      <WrapItem>\n        <MetaFilterSelectSearch\n          title=\"Time Zone\"\n          styles={styles}\n          value={timezones}\n          onChange={(value) => {\n            const values = value as ValueType[];\n            setTimezones(values.slice(-1));\n          }}\n          options={TimezoneOptions}\n          showSearch\n          isTimezone\n        />\n      </WrapItem>\n    </Wrap>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}