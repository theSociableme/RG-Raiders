{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/Filter/AdjascentTimezonePlayers.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Flex, LoadingState, Text, TimezoneOptions, VStack } from '@raidguild/ds';\nimport { PlayerList } from 'components/Player/PlayerList';\nimport { usePlayerFilter } from 'lib/hooks/players';\nimport { useOnScreen } from 'lib/hooks/useOnScreen';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\n\nconst getAdjacentTimezoneQueryVariables = defaultQueryVariables => {\n  var _defaultQueryVariable;\n\n  const timezoneValue = (_defaultQueryVariable = defaultQueryVariables.timezones) === null || _defaultQueryVariable === void 0 ? void 0 : _defaultQueryVariable[0];\n  const timezone = TimezoneOptions.find(t => t.value === timezoneValue);\n  const adjascentTimezones = timezone ? TimezoneOptions.filter(t => Math.abs(t.offset - timezone.offset) <= 4 && t.value !== timezoneValue).map(t => t.value) : [];\n  return _objectSpread(_objectSpread({}, defaultQueryVariables), {}, {\n    offset: 0,\n    timezones: adjascentTimezones\n  });\n};\n\nexport const AdjascentTimezonePlayers = ({\n  queryVariables\n}) => {\n  const {\n    0: variables,\n    1: setVariables\n  } = useState(getAdjacentTimezoneQueryVariables(queryVariables));\n  useEffect(() => {\n    setVariables(getAdjacentTimezoneQueryVariables(queryVariables));\n  }, [queryVariables]);\n  const moreRef = useRef(null);\n  const onScreen = useOnScreen(moreRef);\n  const {\n    players,\n    totalCount,\n    fetching,\n    fetchingMore,\n    error,\n    nextPage,\n    moreAvailable\n  } = usePlayerFilter(variables);\n  useEffect(() => {\n    if (onScreen && !fetching && !fetchingMore && moreAvailable) {\n      nextPage();\n    }\n  }, [nextPage, onScreen, fetching, fetchingMore, moreAvailable]);\n  const isLoading = useMemo(() => fetching || fetchingMore || moreAvailable, [fetching, fetchingMore, moreAvailable]);\n  return __jsx(VStack, {\n    w: \"100%\",\n    spacing: {\n      base: '4',\n      md: '8'\n    },\n    pt: {\n      base: '4',\n      md: '8'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, error ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }\n  }, \"Error: \", error.message) : null, !error && players.length && (fetchingMore || !fetching) ? __jsx(React.Fragment, null, __jsx(Flex, {\n    justify: \"space-between\",\n    w: \"100%\",\n    maxW: \"79rem\",\n    pr: 4,\n    align: \"center\",\n    pb: {\n      base: 4,\n      md: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    fontWeight: \"bold\",\n    fontSize: \"xl\",\n    w: \"100%\",\n    maxW: \"79rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, totalCount, \" player\", totalCount === 1 ? '' : 's', \" in adjacent time zones\")), __jsx(PlayerList, {\n    players: players,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })) : null, __jsx(VStack, {\n    w: \"100%\",\n    ref: moreRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, isLoading ? __jsx(LoadingState, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 22\n    }\n  }) : null, !isLoading && totalCount > 0 ? __jsx(Text, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"No more players available\") : null));\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/Filter/AdjascentTimezonePlayers.tsx"],"names":["Flex","LoadingState","Text","TimezoneOptions","VStack","PlayerList","usePlayerFilter","useOnScreen","React","useEffect","useMemo","useRef","useState","getAdjacentTimezoneQueryVariables","defaultQueryVariables","timezoneValue","timezones","timezone","find","t","value","adjascentTimezones","filter","Math","abs","offset","map","AdjascentTimezonePlayers","queryVariables","variables","setVariables","moreRef","onScreen","players","totalCount","fetching","fetchingMore","error","nextPage","moreAvailable","isLoading","base","md","message","length"],"mappings":"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","sourcesContent":["import { Flex, LoadingState, Text, TimezoneOptions, VStack } from '@raidguild/ds';\nimport { PlayerList } from 'components/Player/PlayerList';\nimport { GetPlayersQueryVariables } from 'graphql/autogen/types';\nimport { usePlayerFilter } from 'lib/hooks/players';\nimport { useOnScreen } from 'lib/hooks/useOnScreen';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\n\ntype Props = {\n  queryVariables: GetPlayersQueryVariables;\n};\n\nconst getAdjacentTimezoneQueryVariables = (\n  defaultQueryVariables: GetPlayersQueryVariables,\n): GetPlayersQueryVariables => {\n  const timezoneValue = defaultQueryVariables.timezones?.[0];\n  const timezone = TimezoneOptions.find((t) => t.value === timezoneValue);\n  const adjascentTimezones = timezone\n    ? TimezoneOptions.filter(\n        (t) =>\n          Math.abs(t.offset - timezone.offset) <= 4 &&\n          t.value !== timezoneValue,\n      ).map((t) => t.value)\n    : [];\n  return {\n    ...defaultQueryVariables,\n    offset: 0,\n    timezones: adjascentTimezones,\n  };\n};\n\nexport const AdjascentTimezonePlayers: React.FC<Props> = ({\n  queryVariables,\n}) => {\n  const [variables, setVariables] = useState<GetPlayersQueryVariables>(\n    getAdjacentTimezoneQueryVariables(queryVariables),\n  );\n\n  useEffect(() => {\n    setVariables(getAdjacentTimezoneQueryVariables(queryVariables));\n  }, [queryVariables]);\n\n  const moreRef = useRef(null);\n  const onScreen = useOnScreen(moreRef);\n\n  const {\n    players,\n    totalCount,\n    fetching,\n    fetchingMore,\n    error,\n    nextPage,\n    moreAvailable,\n  } = usePlayerFilter(variables);\n\n  useEffect(() => {\n    if (onScreen && !fetching && !fetchingMore && moreAvailable) {\n      nextPage();\n    }\n  }, [nextPage, onScreen, fetching, fetchingMore, moreAvailable]);\n\n  const isLoading = useMemo(() => fetching || fetchingMore || moreAvailable, [\n    fetching,\n    fetchingMore,\n    moreAvailable,\n  ]);\n\n  return (\n    <VStack\n      w=\"100%\"\n      spacing={{ base: '4', md: '8' }}\n      pt={{ base: '4', md: '8' }}\n    >\n      {error ? <Text>Error: {error.message}</Text> : null}\n      {!error && players.length && (fetchingMore || !fetching) ? (\n        <>\n          <Flex\n            justify=\"space-between\"\n            w=\"100%\"\n            maxW=\"79rem\"\n            pr={4}\n            align=\"center\"\n            pb={{ base: 4, md: 0 }}\n          >\n            <Text fontWeight=\"bold\" fontSize=\"xl\" w=\"100%\" maxW=\"79rem\">\n              {totalCount} player{totalCount === 1 ? '' : 's'} in adjacent time\n              zones\n            </Text>\n          </Flex>\n          <PlayerList players={players} />\n        </>\n      ) : null}\n      <VStack w=\"100%\" ref={moreRef}>\n        {isLoading ? <LoadingState color=\"white\" /> : null}\n        {!isLoading && totalCount > 0 ? (\n          <Text color=\"white\">No more players available</Text>\n        ) : null}\n      </VStack>\n    </VStack>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}