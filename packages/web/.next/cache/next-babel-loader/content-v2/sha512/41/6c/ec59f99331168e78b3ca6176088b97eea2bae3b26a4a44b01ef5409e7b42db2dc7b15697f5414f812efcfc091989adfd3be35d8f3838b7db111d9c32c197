{"ast":null,"code":"import { numbers } from '@raidguild/utils';\nimport { QuestRepetition_Enum, QuestStatus_Enum } from '../graphql/autogen/types';\nconst {\n  BN,\n  amountToDecimal\n} = numbers;\nexport const UriRegexp = /\\w+:(\\/?\\/?)[^\\s]+/; // Hours to seconds\n\nexport function transformCooldownForBackend(cooldown, repetition) {\n  if (!cooldown || !repetition || repetition !== QuestRepetition_Enum.Recurring) return null;\n  return cooldown * 60 * 60;\n}\nexport function isAllowedToCreateQuest(balance) {\n  if (!balance) return false;\n  const pSEEDDecimals = 18;\n  const minimumPooledSeedBalance = new BN(100);\n  const pSEEDBalanceInDecimal = amountToDecimal(balance, pSEEDDecimals);\n  const allowed = new BN(pSEEDBalanceInDecimal).gt(minimumPooledSeedBalance);\n  return allowed;\n} // TODO factorize this with backend\n\nexport function canCompleteQuest(quest, user) {\n  if (!user || !quest) return false;\n\n  if (quest.status !== QuestStatus_Enum.Open) {\n    return false;\n  } // Personal or unique, check if not already done by player\n\n\n  if (quest.repetition === QuestRepetition_Enum.Unique || quest.repetition === QuestRepetition_Enum.Personal) {\n    return !quest.quest_completions.some(qc => qc.player.id === user.id);\n  }\n\n  if (quest.repetition === QuestRepetition_Enum.Recurring && quest.cooldown) {\n    const myLastCompletion = quest.quest_completions.find(qc => qc.player.id === user.id);\n\n    if (myLastCompletion) {\n      const submittedAt = new Date(myLastCompletion.submitted_at);\n      const now = new Date();\n      const diff = +now - +submittedAt;\n\n      if (diff < quest.cooldown * 1000) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\nexport const QuestRepetitionHint = {\n  [QuestRepetition_Enum.Recurring]: 'Recurring quests can be done multiple time per player after a cooldown.',\n  [QuestRepetition_Enum.Personal]: 'Personal quests can be done once per player',\n  [QuestRepetition_Enum.Unique]: 'Unique quests can be done only once'\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/utils/questHelpers.ts"],"names":["numbers","QuestRepetition_Enum","QuestStatus_Enum","BN","amountToDecimal","UriRegexp","transformCooldownForBackend","cooldown","repetition","Recurring","isAllowedToCreateQuest","balance","pSEEDDecimals","minimumPooledSeedBalance","pSEEDBalanceInDecimal","allowed","gt","canCompleteQuest","quest","user","status","Open","Unique","Personal","quest_completions","some","qc","player","id","myLastCompletion","find","submittedAt","Date","submitted_at","now","diff","QuestRepetitionHint"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AAEA,SACEC,oBADF,EAEEC,gBAFF,QAIO,0BAJP;AAOA,MAAM;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAA0BJ,OAAhC;AAEA,OAAO,MAAMK,SAAS,GAAG,oBAAlB,C,CAEP;;AACA,OAAO,SAASC,2BAAT,CACLC,QADK,EAELC,UAFK,EAGU;AACf,MAAI,CAACD,QAAD,IAAa,CAACC,UAAd,IAA4BA,UAAU,KAAKP,oBAAoB,CAACQ,SAApE,EACE,OAAO,IAAP;AACF,SAAOF,QAAQ,GAAG,EAAX,GAAgB,EAAvB;AACD;AAED,OAAO,SAASG,sBAAT,CACLC,OADK,EAEI;AACT,MAAI,CAACA,OAAL,EAAc,OAAO,KAAP;AAEd,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,wBAAwB,GAAG,IAAIV,EAAJ,CAAO,GAAP,CAAjC;AACA,QAAMW,qBAAqB,GAAGV,eAAe,CAACO,OAAD,EAAUC,aAAV,CAA7C;AAEA,QAAMG,OAAO,GAAG,IAAIZ,EAAJ,CAAOW,qBAAP,EAA8BE,EAA9B,CAAiCH,wBAAjC,CAAhB;AAEA,SAAOE,OAAP;AACD,C,CAED;;AACA,OAAO,SAASE,gBAAT,CACLC,KADK,EAELC,IAFK,EAGI;AACT,MAAI,CAACA,IAAD,IAAS,CAACD,KAAd,EAAqB,OAAO,KAAP;;AAErB,MAAIA,KAAK,CAACE,MAAN,KAAiBlB,gBAAgB,CAACmB,IAAtC,EAA4C;AAC1C,WAAO,KAAP;AACD,GALQ,CAMT;;;AACA,MACEH,KAAK,CAACV,UAAN,KAAqBP,oBAAoB,CAACqB,MAA1C,IACAJ,KAAK,CAACV,UAAN,KAAqBP,oBAAoB,CAACsB,QAF5C,EAGE;AACA,WAAO,CAACL,KAAK,CAACM,iBAAN,CAAwBC,IAAxB,CAA8BC,EAAD,IAAQA,EAAE,CAACC,MAAH,CAAUC,EAAV,KAAiBT,IAAI,CAACS,EAA3D,CAAR;AACD;;AACD,MAAIV,KAAK,CAACV,UAAN,KAAqBP,oBAAoB,CAACQ,SAA1C,IAAuDS,KAAK,CAACX,QAAjE,EAA2E;AACzE,UAAMsB,gBAAgB,GAAGX,KAAK,CAACM,iBAAN,CAAwBM,IAAxB,CACtBJ,EAAD,IAAQA,EAAE,CAACC,MAAH,CAAUC,EAAV,KAAiBT,IAAI,CAACS,EADP,CAAzB;;AAGA,QAAIC,gBAAJ,EAAsB;AACpB,YAAME,WAAW,GAAG,IAAIC,IAAJ,CAASH,gBAAgB,CAACI,YAA1B,CAApB;AACA,YAAMC,GAAG,GAAG,IAAIF,IAAJ,EAAZ;AACA,YAAMG,IAAI,GAAG,CAACD,GAAD,GAAO,CAACH,WAArB;;AACA,UAAII,IAAI,GAAGjB,KAAK,CAACX,QAAN,GAAiB,IAA5B,EAAkC;AAChC,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;AAED,OAAO,MAAM6B,mBAAyD,GAAG;AACvE,GAACnC,oBAAoB,CAACQ,SAAtB,GACE,yEAFqE;AAGvE,GAACR,oBAAoB,CAACsB,QAAtB,GACE,6CAJqE;AAKvE,GAACtB,oBAAoB,CAACqB,MAAtB,GAA+B;AALwC,CAAlE","sourcesContent":["import { numbers } from '@raidguild/utils';\n\nimport {\n  QuestRepetition_Enum,\n  QuestStatus_Enum,\n  QuestWithCompletionFragmentFragment,\n} from '../graphql/autogen/types';\nimport { MeType } from '../graphql/types';\n\nconst { BN, amountToDecimal } = numbers;\n\nexport const UriRegexp = /\\w+:(\\/?\\/?)[^\\s]+/;\n\n// Hours to seconds\nexport function transformCooldownForBackend(\n  cooldown: number | undefined | null,\n  repetition: QuestRepetition_Enum | undefined | null,\n): number | null {\n  if (!cooldown || !repetition || repetition !== QuestRepetition_Enum.Recurring)\n    return null;\n  return cooldown * 60 * 60;\n}\n\nexport function isAllowedToCreateQuest(\n  balance: string | undefined | null,\n): boolean {\n  if (!balance) return false;\n\n  const pSEEDDecimals = 18;\n  const minimumPooledSeedBalance = new BN(100);\n  const pSEEDBalanceInDecimal = amountToDecimal(balance, pSEEDDecimals);\n\n  const allowed = new BN(pSEEDBalanceInDecimal).gt(minimumPooledSeedBalance);\n\n  return allowed;\n}\n\n// TODO factorize this with backend\nexport function canCompleteQuest(\n  quest: QuestWithCompletionFragmentFragment | null | undefined,\n  user: MeType | null | undefined,\n): boolean {\n  if (!user || !quest) return false;\n\n  if (quest.status !== QuestStatus_Enum.Open) {\n    return false;\n  }\n  // Personal or unique, check if not already done by player\n  if (\n    quest.repetition === QuestRepetition_Enum.Unique ||\n    quest.repetition === QuestRepetition_Enum.Personal\n  ) {\n    return !quest.quest_completions.some((qc) => qc.player.id === user.id);\n  }\n  if (quest.repetition === QuestRepetition_Enum.Recurring && quest.cooldown) {\n    const myLastCompletion = quest.quest_completions.find(\n      (qc) => qc.player.id === user.id,\n    );\n    if (myLastCompletion) {\n      const submittedAt = new Date(myLastCompletion.submitted_at);\n      const now = new Date();\n      const diff = +now - +submittedAt;\n      if (diff < quest.cooldown * 1000) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport const QuestRepetitionHint: Record<QuestRepetition_Enum, string> = {\n  [QuestRepetition_Enum.Recurring]:\n    'Recurring quests can be done multiple time per player after a cooldown.',\n  [QuestRepetition_Enum.Personal]:\n    'Personal quests can be done once per player',\n  [QuestRepetition_Enum.Unique]: 'Unique quests can be done only once',\n};\n"]},"metadata":{},"sourceType":"module"}