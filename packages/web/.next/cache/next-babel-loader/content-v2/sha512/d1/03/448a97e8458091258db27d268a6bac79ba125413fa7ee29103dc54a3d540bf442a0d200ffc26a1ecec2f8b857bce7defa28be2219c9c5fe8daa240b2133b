{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Skills.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MetaTag, MetaTheme, SelectSearch, selectStyles, Tooltip, Wrap, WrapItem } from '@raidguild/ds';\nimport { SkillColors } from 'graphql/types';\nimport React from 'react';\nexport const SkillsSelect = ({\n  skillChoices,\n  skills,\n  setSkills,\n  placeHolder,\n  id\n}) => {\n  const styles = _objectSpread(_objectSpread({}, selectStyles), {}, {\n    multiValue: (s, {\n      data\n    }) => _objectSpread(_objectSpread({}, s), {}, {\n      background: SkillColors[data.category],\n      color: MetaTheme.colors.white\n    }),\n    multiValueLabel: (s, {\n      data\n    }) => _objectSpread(_objectSpread({}, s), {}, {\n      background: SkillColors[data.category],\n      color: MetaTheme.colors.white\n    }),\n    groupHeading: (s, {\n      children\n    }) => _objectSpread(_objectSpread(_objectSpread({}, s), selectStyles.groupHeading && selectStyles.groupHeading(s, {\n      children\n    })), {}, {\n      background: SkillColors[children]\n    })\n  });\n\n  return __jsx(SelectSearch, {\n    isMulti: true,\n    styles: styles,\n    value: skills,\n    onChange: value => setSkills(value),\n    options: skillChoices,\n    autoFocus: true,\n    closeMenuOnSelect: false,\n    placeholder: placeHolder,\n    id: `skills-select-container-${id || ''}`,\n    inputId: `skills-select-input-${id || ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  });\n};\nexport const SkillsTags = ({\n  maxSkills = 4,\n  skills\n}) => __jsx(Wrap, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }\n}, skills.slice(0, maxSkills).map(skill => __jsx(WrapItem, {\n  key: skill.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }\n}, __jsx(Tooltip, {\n  label: skill.category,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }\n}, __jsx(MetaTag, {\n  size: \"md\",\n  fontWeight: \"normal\",\n  backgroundColor: SkillColors[skill.category],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 11\n  }\n}, skill.name)))), skills.length > maxSkills && __jsx(WrapItem, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }\n}, __jsx(MetaTag, {\n  size: \"md\",\n  fontWeight: \"normal\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }\n}, `+${skills.length - maxSkills}`)));","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Skills.tsx"],"names":["MetaTag","MetaTheme","SelectSearch","selectStyles","Tooltip","Wrap","WrapItem","SkillColors","React","SkillsSelect","skillChoices","skills","setSkills","placeHolder","id","styles","multiValue","s","data","background","category","color","colors","white","multiValueLabel","groupHeading","children","value","SkillsTags","maxSkills","slice","map","skill","name","length"],"mappings":"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","sourcesContent":["import {\n  MetaTag,\n  MetaTheme,\n  SelectSearch,\n  selectStyles,\n  Tooltip,\n  Wrap,\n  WrapItem,\n} from '@raidguild/ds';\nimport { Skill, SkillCategory_Enum } from 'graphql/autogen/types';\nimport { SkillColors } from 'graphql/types';\nimport React from 'react';\nimport { CategoryOption, SkillOption } from 'utils/skillHelpers';\n\nexport type SetupSkillsProps = {\n  skillChoices: Array<CategoryOption>;\n  skills: Array<SkillOption>;\n  setSkills: React.Dispatch<React.SetStateAction<Array<SkillOption>>>;\n  placeHolder: string;\n  id?: string;\n};\n\nexport const SkillsSelect: React.FC<SetupSkillsProps> = ({\n  skillChoices,\n  skills,\n  setSkills,\n  placeHolder,\n  id,\n}) => {\n  const styles: typeof selectStyles = {\n    ...selectStyles,\n    multiValue: (s, { data }) => ({\n      ...s,\n      background: SkillColors[data.category as SkillCategory_Enum],\n      color: MetaTheme.colors.white,\n    }),\n    multiValueLabel: (s, { data }) => ({\n      ...s,\n      background: SkillColors[data.category as SkillCategory_Enum],\n      color: MetaTheme.colors.white,\n    }),\n    groupHeading: (s, { children }) => ({\n      ...s,\n      ...(selectStyles.groupHeading &&\n        selectStyles.groupHeading(s, { children })),\n      background: SkillColors[children as SkillCategory_Enum],\n    }),\n  };\n\n  return (\n    <SelectSearch\n      isMulti\n      styles={styles}\n      value={skills}\n      onChange={(value) => setSkills(value as Array<SkillOption>)}\n      options={skillChoices}\n      autoFocus\n      closeMenuOnSelect={false}\n      placeholder={placeHolder}\n      id={`skills-select-container-${id || ''}`}\n      inputId={`skills-select-input-${id || ''}`}\n    />\n  );\n};\n\ninterface SkillsProps {\n  skills: Skill[];\n  maxSkills?: number;\n}\nexport const SkillsTags: React.FC<SkillsProps> = ({\n  maxSkills = 4,\n  skills,\n}) => (\n  <Wrap>\n    {skills.slice(0, maxSkills).map((skill) => (\n      <WrapItem key={skill.id}>\n        <Tooltip label={skill.category}>\n          <MetaTag\n            size=\"md\"\n            fontWeight=\"normal\"\n            backgroundColor={SkillColors[skill.category]}\n          >\n            {skill.name}\n          </MetaTag>\n        </Tooltip>\n      </WrapItem>\n    ))}\n    {skills.length > maxSkills && (\n      <WrapItem>\n        <MetaTag size=\"md\" fontWeight=\"normal\">\n          {`+${skills.length - maxSkills}`}\n        </MetaTag>\n      </WrapItem>\n    )}\n  </Wrap>\n);\n"]},"metadata":{},"sourceType":"module"}