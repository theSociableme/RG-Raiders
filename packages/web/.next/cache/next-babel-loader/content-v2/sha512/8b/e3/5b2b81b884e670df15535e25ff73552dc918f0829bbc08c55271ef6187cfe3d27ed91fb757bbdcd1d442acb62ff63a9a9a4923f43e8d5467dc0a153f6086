{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Setup/SetupPlayerType.tsx\";\nvar __jsx = React.createElement;\nimport { MetaButton, MetaHeading, SimpleGrid, Text, useToast } from '@raidguild/ds';\nimport { FlexContainer } from 'components/Container';\nimport { useSetupFlow } from 'contexts/SetupContext';\nimport { useUpdateAboutYouMutation } from 'graphql/autogen/types';\nimport { useUser } from 'lib/hooks';\nimport React, { useState } from 'react';\nexport const SetupPlayerType = ({\n  playerTypeChoices,\n  playerType,\n  setPlayerType\n}) => {\n  const {\n    onNextPress,\n    nextButtonLabel\n  } = useSetupFlow();\n  const {\n    user\n  } = useUser({\n    redirectTo: '/'\n  });\n  const toast = useToast();\n  const [updateAboutYouRes, updateAboutYou] = useUpdateAboutYouMutation();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const handleNextPress = async () => {\n    var _user$player, _user$player$playerTy;\n\n    if (!user) return;\n    setLoading(true);\n\n    if (((_user$player = user.player) === null || _user$player === void 0 ? void 0 : (_user$player$playerTy = _user$player.playerType) === null || _user$player$playerTy === void 0 ? void 0 : _user$player$playerTy.id) !== (playerType === null || playerType === void 0 ? void 0 : playerType.id)) {\n      const {\n        error\n      } = await updateAboutYou({\n        playerId: user.id,\n        input: {\n          player_type_id: playerType === null || playerType === void 0 ? void 0 : playerType.id\n        }\n      });\n\n      if (error) {\n        toast({\n          title: 'Error',\n          description: 'Unable to update player type. The octo is sad ðŸ˜¢',\n          status: 'error',\n          isClosable: true\n        });\n        setLoading(false);\n        return;\n      }\n    }\n\n    onNextPress();\n  };\n\n  return __jsx(FlexContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(MetaHeading, {\n    mb: 5,\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Player Type\"), __jsx(Text, {\n    mb: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Please read the features of each player type below. And select the one that suits you best.\"), __jsx(SimpleGrid, {\n    columns: [1, null, 3, 3],\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, playerTypeChoices.map(p => __jsx(FlexContainer, {\n    key: p.id,\n    p: [4, null, 6],\n    bgColor: playerType && playerType.id === p.id ? 'purpleBoxDark' : 'purpleBoxLight',\n    borderRadius: \"0.5rem\",\n    _hover: {\n      bgColor: 'purpleBoxDark'\n    },\n    transition: \"background 0.25s\",\n    cursor: \"pointer\",\n    onClick: () => setPlayerType(p),\n    align: \"stretch\",\n    justify: \"flex-start\",\n    border: \"2px\",\n    borderColor: playerType && playerType.id === p.id ? 'purple.400' : 'transparent',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    color: \"white\",\n    fontWeight: \"bold\",\n    mb: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, p.title), __jsx(Text, {\n    color: \"blueLight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, p.description)))), __jsx(MetaButton, {\n    onClick: handleNextPress,\n    mt: 10,\n    isDisabled: !playerType,\n    isLoading: updateAboutYouRes.fetching || loading,\n    loadingText: \"Saving\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, nextButtonLabel));\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Setup/SetupPlayerType.tsx"],"names":["MetaButton","MetaHeading","SimpleGrid","Text","useToast","FlexContainer","useSetupFlow","useUpdateAboutYouMutation","useUser","React","useState","SetupPlayerType","playerTypeChoices","playerType","setPlayerType","onNextPress","nextButtonLabel","user","redirectTo","toast","updateAboutYouRes","updateAboutYou","loading","setLoading","handleNextPress","player","id","error","playerId","input","player_type_id","title","description","status","isClosable","map","p","bgColor","fetching"],"mappings":"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","sourcesContent":["import {\n  MetaButton,\n  MetaHeading,\n  SimpleGrid,\n  Text,\n  useToast,\n} from '@raidguild/ds';\nimport { FlexContainer } from 'components/Container';\nimport { useSetupFlow } from 'contexts/SetupContext';\nimport { Player_Type, useUpdateAboutYouMutation } from 'graphql/autogen/types';\nimport { useUser } from 'lib/hooks';\nimport React, { useState } from 'react';\n\nexport type SetupPlayerTypeProps = {\n  playerTypeChoices: Array<Player_Type>;\n  playerType: Player_Type | undefined;\n  setPlayerType: React.Dispatch<React.SetStateAction<Player_Type | undefined>>;\n};\n\nexport const SetupPlayerType: React.FC<SetupPlayerTypeProps> = ({\n  playerTypeChoices,\n  playerType,\n  setPlayerType,\n}) => {\n  const { onNextPress, nextButtonLabel } = useSetupFlow();\n  const { user } = useUser({ redirectTo: '/' });\n  const toast = useToast();\n\n  const [updateAboutYouRes, updateAboutYou] = useUpdateAboutYouMutation();\n  const [loading, setLoading] = useState(false);\n\n  const handleNextPress = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    if (user.player?.playerType?.id !== playerType?.id) {\n      const { error } = await updateAboutYou({\n        playerId: user.id,\n        input: {\n          player_type_id: playerType?.id,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: 'Error',\n          description: 'Unable to update player type. The octo is sad ðŸ˜¢',\n          status: 'error',\n          isClosable: true,\n        });\n        setLoading(false);\n        return;\n      }\n    }\n\n    onNextPress();\n  };\n\n  return (\n    <FlexContainer>\n      <MetaHeading mb={5} textAlign=\"center\">\n        Player Type\n      </MetaHeading>\n      <Text mb={10}>\n        Please read the features of each player type below. And select the one\n        that suits you best.\n      </Text>\n      <SimpleGrid columns={[1, null, 3, 3]} spacing={4}>\n        {playerTypeChoices.map((p) => (\n          <FlexContainer\n            key={p.id}\n            p={[4, null, 6]}\n            bgColor={\n              playerType && playerType.id === p.id\n                ? 'purpleBoxDark'\n                : 'purpleBoxLight'\n            }\n            borderRadius=\"0.5rem\"\n            _hover={{ bgColor: 'purpleBoxDark' }}\n            transition=\"background 0.25s\"\n            cursor=\"pointer\"\n            onClick={() => setPlayerType(p)}\n            align=\"stretch\"\n            justify=\"flex-start\"\n            border=\"2px\"\n            borderColor={\n              playerType && playerType.id === p.id\n                ? 'purple.400'\n                : 'transparent'\n            }\n          >\n            <Text color=\"white\" fontWeight=\"bold\" mb={4}>\n              {p.title}\n            </Text>\n            <Text color=\"blueLight\">{p.description}</Text>\n          </FlexContainer>\n        ))}\n      </SimpleGrid>\n\n      <MetaButton\n        onClick={handleNextPress}\n        mt={10}\n        isDisabled={!playerType}\n        isLoading={updateAboutYouRes.fetching || loading}\n        loadingText=\"Saving\"\n      >\n        {nextButtonLabel}\n      </MetaButton>\n    </FlexContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}