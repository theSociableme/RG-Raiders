{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/PlayerAvatar.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Avatar } from '@raidguild/ds';\nimport React from 'react';\nimport { getPlayerImage, getPlayerName, hasPlayerImage } from 'utils/playerHelpers';\nexport const PlayerAvatar = (_ref) => {\n  let {\n    player\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"player\"]);\n\n  const attrs = _objectSpread({\n    src: getPlayerImage(player),\n    name: getPlayerName(player)\n  }, props);\n\n  if (hasPlayerImage(player)) attrs.bg = 'transparent';\n  return __jsx(Avatar, _extends({}, attrs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/PlayerAvatar.tsx"],"names":["Avatar","React","getPlayerImage","getPlayerName","hasPlayerImage","PlayerAvatar","player","props","attrs","src","name","bg"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAoC,aAApC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,qBAJP;AAOA,OAAO,MAAMC,YAAyC,GAAG,UAGnD;AAAA,MAHoD;AACxDC,IAAAA;AADwD,GAGpD;AAAA,MADDC,KACC;;AACJ,QAAMC,KAAK;AACTC,IAAAA,GAAG,EAAEP,cAAc,CAACI,MAAD,CADV;AAETI,IAAAA,IAAI,EAAEP,aAAa,CAACG,MAAD;AAFV,KAGNC,KAHM,CAAX;;AAKA,MAAIH,cAAc,CAACE,MAAD,CAAlB,EAA4BE,KAAK,CAACG,EAAN,GAAW,aAAX;AAE5B,SAAO,MAAC,MAAD,eAAYH,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAZM","sourcesContent":["import { Avatar, AvatarProps } from '@raidguild/ds';\nimport { PlayerFragmentFragment } from 'graphql/autogen/types';\nimport React from 'react';\nimport {\n  getPlayerImage,\n  getPlayerName,\n  hasPlayerImage,\n} from 'utils/playerHelpers';\n\ntype PlayerAvatarProps = AvatarProps & { player: PlayerFragmentFragment };\nexport const PlayerAvatar: React.FC<PlayerAvatarProps> = ({\n  player,\n  ...props\n}) => {\n  const attrs = {\n    src: getPlayerImage(player),\n    name: getPlayerName(player),\n    ...props,\n  };\n  if (hasPlayerImage(player)) attrs.bg = 'transparent';\n\n  return <Avatar {...attrs} />;\n};\n"]},"metadata":{},"sourceType":"module"}