{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/Filter/MobileFilters.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { ArrowBackIcon, ArrowForwardIcon, Button, CheckIcon, CloseIcon, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, filterTimezones, Flex, getTimezonesFor, IconButton, Input, MetaButton, Text, TimezoneOptions } from '@raidguild/ds';\nimport { SkillColors } from 'graphql/types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nvar Selected;\n\n(function (Selected) {\n  Selected[Selected[\"NONE\"] = 0] = \"NONE\";\n  Selected[Selected[\"PLAYER_TYPE\"] = 1] = \"PLAYER_TYPE\";\n  Selected[Selected[\"SKILLS\"] = 2] = \"SKILLS\";\n  Selected[Selected[\"AVAILABILITY\"] = 3] = \"AVAILABILITY\";\n  Selected[Selected[\"TIME_ZONE\"] = 4] = \"TIME_ZONE\";\n})(Selected || (Selected = {}));\n\nexport const MobileFilters = (_ref) => {\n  let {\n    aggregates,\n    skills,\n    setSkills,\n    playerTypes,\n    setPlayerTypes,\n    timezones,\n    setTimezones,\n    availability,\n    setAvailability,\n    isOpen,\n    onClose: closeDrawer,\n    filtersUsed,\n    resetAllFilters\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"aggregates\", \"skills\", \"setSkills\", \"playerTypes\", \"setPlayerTypes\", \"timezones\", \"setTimezones\", \"availability\", \"setAvailability\", \"isOpen\", \"onClose\", \"filtersUsed\", \"resetAllFilters\"]);\n\n  const {\n    0: title,\n    1: setTitle\n  } = useState('Filter');\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(Selected.NONE);\n  const onBack = useCallback(() => {\n    setSelected(Selected.NONE);\n  }, []);\n  const onClose = useCallback(() => {\n    setSelected(Selected.NONE);\n    closeDrawer();\n  }, [closeDrawer]);\n  useEffect(() => {\n    switch (selected) {\n      case Selected.PLAYER_TYPE:\n        setTitle('Type of Player');\n        return;\n\n      case Selected.SKILLS:\n        setTitle('Skills');\n        return;\n\n      case Selected.AVAILABILITY:\n        setTitle('Availability');\n        return;\n\n      case Selected.TIME_ZONE:\n        setTitle('Time Zone');\n        return;\n\n      case Selected.NONE:\n      default:\n        setTitle('Filter');\n    }\n  }, [selected]);\n  return __jsx(Drawer, _extends({\n    isOpen: isOpen,\n    onClose: onClose\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }), __jsx(DrawerContent, {\n    maxW: \"100%\",\n    bg: \"black\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, __jsx(DrawerHeader, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    p: \"0.5rem\",\n    borderBottom: \"1px solid\",\n    borderBottomColor: \"borderPurple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, selected !== Selected.NONE ? __jsx(IconButton, {\n    p: \"1\",\n    variant: \"link\",\n    colorScheme: \"white\",\n    icon: __jsx(ArrowBackIcon, {\n      boxSize: \"2rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }),\n    onClick: onBack,\n    \"aria-label\": \"Clear Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }) : __jsx(Flex, {\n    w: \"2.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    textTransform: \"uppercase\",\n    fontWeight: \"bold\",\n    fontSize: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, title), __jsx(IconButton, {\n    py: \"3\",\n    variant: \"link\",\n    colorScheme: \"white\",\n    icon: __jsx(CloseIcon, {\n      boxSize: \"1rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }),\n    onClick: onClose,\n    \"aria-label\": \"Clear Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  })), selected === Selected.NONE && __jsx(React.Fragment, null, __jsx(DrawerBody, {\n    p: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, __jsx(FilterItem, {\n    title: \"Type Of Player\",\n    onClick: () => setSelected(Selected.PLAYER_TYPE),\n    value: playerTypes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }), __jsx(FilterItem, {\n    title: \"Skills\",\n    onClick: () => setSelected(Selected.SKILLS),\n    value: skills,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }), __jsx(FilterItem, {\n    title: \"Availability\",\n    onClick: () => setSelected(Selected.AVAILABILITY),\n    value: availability ? [availability] : [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }), __jsx(FilterItem, {\n    title: \"Time Zone\",\n    onClick: () => setSelected(Selected.TIME_ZONE),\n    value: timezones,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  })), __jsx(DrawerFooter, {\n    p: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, __jsx(Flex, {\n    direction: \"column\",\n    justify: \"center\",\n    w: \"100%\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, filtersUsed && __jsx(Button, {\n    variant: \"link\",\n    color: \"cyan.400\",\n    onClick: resetAllFilters,\n    size: \"sm\",\n    minH: \"2.5rem\",\n    p: \"2\",\n    mb: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }\n  }, \"RESET ALL FILTERS\"), __jsx(MetaButton, {\n    onClick: onClose,\n    w: \"15rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, \"SHOW RESULTS\")))), selected === Selected.PLAYER_TYPE && __jsx(FilterContent, {\n    value: playerTypes,\n    onChange: value => {\n      setPlayerTypes(value);\n    },\n    options: aggregates.playerTypes,\n    onBack: onBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }), selected === Selected.SKILLS && __jsx(FilterContent, {\n    value: skills,\n    onChange: value => {\n      setSkills(value);\n    },\n    options: aggregates.skillChoices,\n    onBack: onBack,\n    showSearch: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }), selected === Selected.AVAILABILITY && __jsx(FilterContent, {\n    value: availability ? [availability] : [],\n    onChange: value => {\n      const values = value;\n      setAvailability(values[values.length - 1]);\n    },\n    options: [1, 5, 10, 20, 30, 40].map(value => ({\n      value: value.toString(),\n      label: `> ${value.toString()} h/week`\n    })),\n    onBack: onBack,\n    isMulti: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), selected === Selected.TIME_ZONE && __jsx(FilterContent, {\n    value: timezones,\n    onChange: value => {\n      const values = value;\n      setTimezones(values.slice(-1));\n    },\n    options: TimezoneOptions,\n    onBack: onBack,\n    isMulti: false,\n    showSearch: true,\n    isTimezone: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst FilterItem = (_ref2) => {\n  let {\n    title,\n    value\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"title\", \"value\"]);\n\n  const lastIndex = value.length - 1;\n  return __jsx(Flex, _extends({\n    justify: \"space-between\",\n    align: \"center\",\n    p: \"1rem\",\n    pr: \"0.75rem\",\n    borderBottom: \"1px solid\",\n    borderBottomColor: \"borderPurple\",\n    cursor: \"pointer\",\n    _hover: {\n      bg: 'whiteAlpha.100'\n    },\n    w: \"100%\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 5\n    }\n  }), __jsx(Flex, {\n    direction: \"column\",\n    align: \"flex-start\",\n    w: \"100%\",\n    overflow: \"hidden\",\n    mr: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    fontWeight: \"bold\",\n    fontSize: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, title), value.length > 0 && __jsx(Text, {\n    fontWeight: \"300\",\n    fontSize: \"sm\",\n    textOverflow: \"ellipsis\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, value.reduce((t, v, i) => i === lastIndex ? t.concat(v.label) : t.concat(v.label, ', '), ''))), __jsx(ArrowForwardIcon, {\n    boxSize: \"2rem\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst scrollbarVisible = element => element.scrollHeight > element.clientHeight;\n\nconst searchFilter = searchText => ({\n  value,\n  label\n}) => label.toLowerCase().includes(searchText) || value.toLowerCase().includes(searchText);\n\nconst FilterContent = ({\n  value: selectedValue,\n  onChange,\n  options: allOptions,\n  onBack,\n  isMulti = true,\n  showSearch = false,\n  isTimezone = false\n}) => {\n  const isCategoryFilter = useMemo(() => allOptions.length > 0 && !!allOptions[0].options, [allOptions]);\n  const {\n    0: value,\n    1: setValue\n  } = useState(selectedValue);\n  const onClear = useCallback(() => {\n    setValue([]);\n  }, []);\n  const onSave = useCallback(() => {\n    onChange(value);\n    onBack();\n  }, [value, onChange, onBack]);\n  const {\n    0: options,\n    1: setOptions\n  } = useState(allOptions);\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const onSearch = useCallback(searchText => {\n    if (!searchText) {\n      setOptions(allOptions);\n    }\n\n    let filteredTimezones = [];\n\n    if (isTimezone) {\n      filteredTimezones = getTimezonesFor(searchText);\n    }\n\n    if (isCategoryFilter) {\n      const newOptions = allOptions.reduce((t, v) => {\n        const {\n          label,\n          options: categoryOptions\n        } = v;\n        const filteredOptions = isTimezone ? categoryOptions.filter(filterTimezones(searchText, filteredTimezones)) : categoryOptions.filter(searchFilter(searchText));\n        const newValue = {\n          label,\n          options: filteredOptions\n        };\n        return newOptions.length > 0 ? [...t, newValue] : t;\n      }, []);\n      setOptions(newOptions);\n    } else {\n      const filteredOptions = isTimezone ? allOptions.filter(filterTimezones(searchText, filteredTimezones)) : allOptions.filter(searchFilter(searchText));\n      setOptions(filteredOptions);\n    }\n  }, [allOptions, isCategoryFilter, isTimezone]);\n  const renderOptions = useCallback(optionsToRender => {\n    const lastIndex = optionsToRender.length - 1;\n    return __jsx(React.Fragment, null, optionsToRender.map((option, index) => {\n      const {\n        value: optionValue,\n        label\n      } = option;\n      const isSelected = value.reduce((t, v) => t || v.value === optionValue, false);\n      return __jsx(Flex, {\n        pl: \"1rem\",\n        cursor: \"pointer\",\n        _hover: {\n          bg: 'whiteAlpha.100'\n        },\n        key: optionValue,\n        onClick: () => {\n          if (isMulti) {\n            if (isSelected) {\n              const newValue = value.slice();\n              newValue.splice(value.indexOf(option), 1);\n              setValue(newValue);\n            } else {\n              const newValue = value.slice();\n              newValue.push(option);\n              setValue(newValue);\n            }\n          } else {\n            setValue(isSelected ? [] : [option]);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 15\n        }\n      }, __jsx(Flex, {\n        w: \"100%\",\n        p: \"1rem\",\n        pl: \"0\",\n        justify: \"space-between\",\n        align: \"center\",\n        borderBottom: lastIndex === index ? '0' : '1px solid',\n        borderBottomColor: \"borderPurple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 17\n        }\n      }, __jsx(Text, {\n        fontWeight: \"bold\",\n        fontSize: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 19\n        }\n      }, label), isSelected && __jsx(CheckIcon, {\n        color: \"white\",\n        boxSize: \"1.25rem\",\n        mr: \"0.1rem\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }\n      })));\n    }));\n  }, [isMulti, value]);\n  const {\n    0: hasScrollbar,\n    1: setHasScrollbar\n  } = useState(false);\n  const bodyRef = useRef(null);\n  useEffect(() => {\n    if (bodyRef.current) {\n      setHasScrollbar(scrollbarVisible(bodyRef.current));\n    }\n  }, []);\n  return __jsx(React.Fragment, null, showSearch && __jsx(Flex, {\n    w: \"100%\",\n    borderBottomWidth: \"1px\",\n    borderBottomColor: \"borderPurple\",\n    borderBottomStyle: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    autoFocus: true,\n    width: \"calc(100% - 2rem)\",\n    placeholder: \"Search...\",\n    _placeholder: {\n      color: 'whiteAlpha.500'\n    },\n    borderRadius: \"0\",\n    borderWidth: \"2px\",\n    mx: \"4\",\n    my: \"2\",\n    borderColor: \"borderPurple\",\n    onChange: e => {\n      const inputValue = e.target.value;\n      setSearch(inputValue);\n      onSearch(inputValue.toLowerCase().trim());\n    },\n    value: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 11\n    }\n  })), __jsx(DrawerBody, {\n    p: \"0\",\n    ref: bodyRef,\n    borderBottom: hasScrollbar ? '1px solid' : '0',\n    borderBottomColor: \"borderPurple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    direction: \"column\",\n    borderBottom: hasScrollbar ? '0' : '1px solid',\n    borderBottomColor: \"borderPurple\",\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 9\n    }\n  }, isCategoryFilter ? options.map(({\n    label,\n    options: categoryOptions\n  }) => __jsx(Flex, {\n    direction: \"column\",\n    key: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 19\n    }\n  }, __jsx(Flex, {\n    w: \"100%\",\n    p: \"1rem\",\n    justify: \"space-between\",\n    align: \"center\",\n    bg: SkillColors[label],\n    position: \"sticky\",\n    top: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontWeight: \"bold\",\n    fontSize: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 23\n    }\n  }, label)), renderOptions(categoryOptions))) : renderOptions(options))), __jsx(DrawerFooter, {\n    p: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    direction: \"column\",\n    justify: \"center\",\n    w: \"100%\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 9\n    }\n  }, value.length > 0 && __jsx(Button, {\n    variant: \"link\",\n    color: \"cyan.400\",\n    onClick: onClear,\n    size: \"sm\",\n    minH: \"2.5rem\",\n    p: \"2\",\n    mb: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }\n  }, \"CANCEL SELECTION\"), __jsx(MetaButton, {\n    onClick: onSave,\n    w: \"15rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 11\n    }\n  }, \"SAVE\"))));\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Player/Filter/MobileFilters.tsx"],"names":["ArrowBackIcon","ArrowForwardIcon","Button","CheckIcon","CloseIcon","Drawer","DrawerBody","DrawerContent","DrawerFooter","DrawerHeader","filterTimezones","Flex","getTimezonesFor","IconButton","Input","MetaButton","Text","TimezoneOptions","SkillColors","React","useCallback","useEffect","useMemo","useRef","useState","Selected","MobileFilters","aggregates","skills","setSkills","playerTypes","setPlayerTypes","timezones","setTimezones","availability","setAvailability","isOpen","onClose","closeDrawer","filtersUsed","resetAllFilters","props","title","setTitle","selected","setSelected","NONE","onBack","PLAYER_TYPE","SKILLS","AVAILABILITY","TIME_ZONE","value","skillChoices","values","length","map","toString","label","slice","FilterItem","lastIndex","bg","reduce","t","v","i","concat","scrollbarVisible","element","scrollHeight","clientHeight","searchFilter","searchText","toLowerCase","includes","FilterContent","selectedValue","onChange","options","allOptions","isMulti","showSearch","isTimezone","isCategoryFilter","setValue","onClear","onSave","setOptions","search","setSearch","onSearch","filteredTimezones","newOptions","categoryOptions","filteredOptions","filter","newValue","renderOptions","optionsToRender","option","index","optionValue","isSelected","splice","indexOf","push","hasScrollbar","setHasScrollbar","bodyRef","current","color","e","inputValue","target","trim"],"mappings":";;;;;;;;;AAAA,SACEA,aADF,EAEEC,gBAFF,EAGEC,MAHF,EAIEC,SAJF,EAKEC,SALF,EAMEC,MANF,EAOEC,UAPF,EAQEC,aARF,EASEC,YATF,EAUEC,YAVF,EAWEC,eAXF,EAYEC,IAZF,EAcEC,eAdF,EAeEC,UAfF,EAgBEC,KAhBF,EAiBEC,UAjBF,EAkBEC,IAlBF,EAmBEC,eAnBF,QAqBO,aArBP;AAuBA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAOC,KAAP,IACEC,WADF,EAEEC,SAFF,EAGEC,OAHF,EAIEC,MAJF,EAKEC,QALF,QAMO,OANP;IA+BKC,Q;;WAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;GAAAA,Q,KAAAA,Q;;AAQL,OAAO,MAAMC,aAA8B,GAAG,UAexC;AAAA,MAfyC;AAC7CC,IAAAA,UAD6C;AAE7CC,IAAAA,MAF6C;AAG7CC,IAAAA,SAH6C;AAI7CC,IAAAA,WAJ6C;AAK7CC,IAAAA,cAL6C;AAM7CC,IAAAA,SAN6C;AAO7CC,IAAAA,YAP6C;AAQ7CC,IAAAA,YAR6C;AAS7CC,IAAAA,eAT6C;AAU7CC,IAAAA,MAV6C;AAW7CC,IAAAA,OAAO,EAAEC,WAXoC;AAY7CC,IAAAA,WAZ6C;AAa7CC,IAAAA;AAb6C,GAezC;AAAA,MADDC,KACC;;AACJ,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAAC,QAAD,CAAlC;AACA,QAAM;AAAA,OAACoB,QAAD;AAAA,OAAWC;AAAX,MAA0BrB,QAAQ,CAAWC,QAAQ,CAACqB,IAApB,CAAxC;AAEA,QAAMC,MAAM,GAAG3B,WAAW,CAAC,MAAM;AAC/ByB,IAAAA,WAAW,CAACpB,QAAQ,CAACqB,IAAV,CAAX;AACD,GAFyB,EAEvB,EAFuB,CAA1B;AAGA,QAAMT,OAAO,GAAGjB,WAAW,CAAC,MAAM;AAChCyB,IAAAA,WAAW,CAACpB,QAAQ,CAACqB,IAAV,CAAX;AACAR,IAAAA,WAAW;AACZ,GAH0B,EAGxB,CAACA,WAAD,CAHwB,CAA3B;AAKAjB,EAAAA,SAAS,CAAC,MAAM;AACd,YAAQuB,QAAR;AACE,WAAKnB,QAAQ,CAACuB,WAAd;AACEL,QAAAA,QAAQ,CAAC,gBAAD,CAAR;AACA;;AACF,WAAKlB,QAAQ,CAACwB,MAAd;AACEN,QAAAA,QAAQ,CAAC,QAAD,CAAR;AACA;;AACF,WAAKlB,QAAQ,CAACyB,YAAd;AACEP,QAAAA,QAAQ,CAAC,cAAD,CAAR;AACA;;AACF,WAAKlB,QAAQ,CAAC0B,SAAd;AACER,QAAAA,QAAQ,CAAC,WAAD,CAAR;AACA;;AACF,WAAKlB,QAAQ,CAACqB,IAAd;AACA;AACEH,QAAAA,QAAQ,CAAC,QAAD,CAAR;AAfJ;AAiBD,GAlBQ,EAkBN,CAACC,QAAD,CAlBM,CAAT;AAoBA,SACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAER,MAAhB;AAAwB,IAAA,OAAO,EAAEC;AAAjC,KAA8CI,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,aAAD;AAAe,IAAA,IAAI,EAAC,MAApB;AAA2B,IAAA,EAAE,EAAC,OAA9B;AAAsC,IAAA,KAAK,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,aAAa,EAAC,KAFhB;AAGE,IAAA,cAAc,EAAC,eAHjB;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,CAAC,EAAC,QALJ;AAME,IAAA,YAAY,EAAC,WANf;AAOE,IAAA,iBAAiB,EAAC,cAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGG,QAAQ,KAAKnB,QAAQ,CAACqB,IAAtB,GACC,MAAC,UAAD;AACE,IAAA,CAAC,EAAC,GADJ;AAEE,IAAA,OAAO,EAAC,MAFV;AAGE,IAAA,WAAW,EAAC,OAHd;AAIE,IAAA,IAAI,EAAE,MAAC,aAAD;AAAe,MAAA,OAAO,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR;AAKE,IAAA,OAAO,EAAEC,MALX;AAME,kBAAW,cANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAUC,MAAC,IAAD;AAAM,IAAA,CAAC,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,EAqBE,MAAC,IAAD;AAAM,IAAA,aAAa,EAAC,WAApB;AAAgC,IAAA,UAAU,EAAC,MAA3C;AAAkD,IAAA,QAAQ,EAAC,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,KADH,CArBF,EAwBE,MAAC,UAAD;AACE,IAAA,EAAE,EAAC,GADL;AAEE,IAAA,OAAO,EAAC,MAFV;AAGE,IAAA,WAAW,EAAC,OAHd;AAIE,IAAA,IAAI,EAAE,MAAC,SAAD;AAAW,MAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR;AAKE,IAAA,OAAO,EAAEL,OALX;AAME,kBAAW,cANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,CADF,EAkCGO,QAAQ,KAAKnB,QAAQ,CAACqB,IAAtB,IACC,4BACE,MAAC,UAAD;AAAY,IAAA,CAAC,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,KAAK,EAAC,gBADR;AAEE,IAAA,OAAO,EAAE,MAAMD,WAAW,CAACpB,QAAQ,CAACuB,WAAV,CAF5B;AAGE,IAAA,KAAK,EAAElB,WAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,UAAD;AACE,IAAA,KAAK,EAAC,QADR;AAEE,IAAA,OAAO,EAAE,MAAMe,WAAW,CAACpB,QAAQ,CAACwB,MAAV,CAF5B;AAGE,IAAA,KAAK,EAAErB,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAWE,MAAC,UAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,OAAO,EAAE,MAAMiB,WAAW,CAACpB,QAAQ,CAACyB,YAAV,CAF5B;AAGE,IAAA,KAAK,EAAEhB,YAAY,GAAG,CAACA,YAAD,CAAH,GAAoB,EAHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAgBE,MAAC,UAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,OAAO,EAAE,MAAMW,WAAW,CAACpB,QAAQ,CAAC0B,SAAV,CAF5B;AAGE,IAAA,KAAK,EAAEnB,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF,EAuBE,MAAC,YAAD;AAAc,IAAA,CAAC,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAyB,IAAA,OAAO,EAAC,QAAjC;AAA0C,IAAA,CAAC,EAAC,MAA5C;AAAmD,IAAA,KAAK,EAAC,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,WAAW,IACV,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,OAAO,EAAEC,eAHX;AAIE,IAAA,IAAI,EAAC,IAJP;AAKE,IAAA,IAAI,EAAC,QALP;AAME,IAAA,CAAC,EAAC,GANJ;AAOE,IAAA,EAAE,EAAC,MAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFJ,EAcE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAEH,OAArB;AAA8B,IAAA,CAAC,EAAC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF,CADF,CAvBF,CAnCJ,EAgFGO,QAAQ,KAAKnB,QAAQ,CAACuB,WAAtB,IACC,MAAC,aAAD;AACE,IAAA,KAAK,EAAElB,WADT;AAEE,IAAA,QAAQ,EAAGsB,KAAD,IAAW;AACnBrB,MAAAA,cAAc,CAACqB,KAAD,CAAd;AACD,KAJH;AAKE,IAAA,OAAO,EAAEzB,UAAU,CAACG,WALtB;AAME,IAAA,MAAM,EAAEiB,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjFJ,EA0FGH,QAAQ,KAAKnB,QAAQ,CAACwB,MAAtB,IACC,MAAC,aAAD;AACE,IAAA,KAAK,EAAErB,MADT;AAEE,IAAA,QAAQ,EAAGwB,KAAD,IAAW;AACnBvB,MAAAA,SAAS,CAACuB,KAAD,CAAT;AACD,KAJH;AAKE,IAAA,OAAO,EAAEzB,UAAU,CAAC0B,YALtB;AAME,IAAA,MAAM,EAAEN,MANV;AAOE,IAAA,UAAU,MAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3FJ,EAqGGH,QAAQ,KAAKnB,QAAQ,CAACyB,YAAtB,IACC,MAAC,aAAD;AACE,IAAA,KAAK,EAAEhB,YAAY,GAAG,CAACA,YAAD,CAAH,GAAoB,EADzC;AAEE,IAAA,QAAQ,EAAGkB,KAAD,IAAW;AACnB,YAAME,MAAM,GAAGF,KAAf;AACAjB,MAAAA,eAAe,CAACmB,MAAM,CAACA,MAAM,CAACC,MAAP,GAAgB,CAAjB,CAAP,CAAf;AACD,KALH;AAME,IAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuBC,GAAvB,CAA4BJ,KAAD,KAAY;AAC9CA,MAAAA,KAAK,EAAEA,KAAK,CAACK,QAAN,EADuC;AAE9CC,MAAAA,KAAK,EAAG,KAAIN,KAAK,CAACK,QAAN,EAAiB;AAFiB,KAAZ,CAA3B,CANX;AAUE,IAAA,MAAM,EAAEV,MAVV;AAWE,IAAA,OAAO,EAAE,KAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtGJ,EAoHGH,QAAQ,KAAKnB,QAAQ,CAAC0B,SAAtB,IACC,MAAC,aAAD;AACE,IAAA,KAAK,EAAEnB,SADT;AAEE,IAAA,QAAQ,EAAGoB,KAAD,IAAW;AACnB,YAAME,MAAM,GAAGF,KAAf;AACAnB,MAAAA,YAAY,CAACqB,MAAM,CAACK,KAAP,CAAa,CAAC,CAAd,CAAD,CAAZ;AACD,KALH;AAME,IAAA,OAAO,EAAE1C,eANX;AAOE,IAAA,MAAM,EAAE8B,MAPV;AAQE,IAAA,OAAO,EAAE,KARX;AASE,IAAA,UAAU,MATZ;AAUE,IAAA,UAAU,MAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArHJ,CADF,CADF;AAuID,CAtLM;;AA6LP,MAAMa,UAAqC,GAAG,WAAgC;AAAA,MAA/B;AAAElB,IAAAA,KAAF;AAASU,IAAAA;AAAT,GAA+B;AAAA,MAAZX,KAAY;;AAC5E,QAAMoB,SAAS,GAAGT,KAAK,CAACG,MAAN,GAAe,CAAjC;AACA,SACE,MAAC,IAAD;AACE,IAAA,OAAO,EAAC,eADV;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,CAAC,EAAC,MAHJ;AAIE,IAAA,EAAE,EAAC,SAJL;AAKE,IAAA,YAAY,EAAC,WALf;AAME,IAAA,iBAAiB,EAAC,cANpB;AAOE,IAAA,MAAM,EAAC,SAPT;AAQE,IAAA,MAAM,EAAE;AAAEO,MAAAA,EAAE,EAAE;AAAN,KARV;AASE,IAAA,CAAC,EAAC;AATJ,KAUMrB,KAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYE,MAAC,IAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,KAAK,EAAC,YAFR;AAGE,IAAA,CAAC,EAAC,MAHJ;AAIE,IAAA,QAAQ,EAAC,QAJX;AAKE,IAAA,EAAE,EAAC,MALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,QAAQ,EAAC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,KADH,CAPF,EAUGU,KAAK,CAACG,MAAN,GAAe,CAAf,IACC,MAAC,IAAD;AACE,IAAA,UAAU,EAAC,KADb;AAEE,IAAA,QAAQ,EAAC,IAFX;AAGE,IAAA,YAAY,EAAC,UAHf;AAIE,IAAA,QAAQ,EAAC,QAJX;AAKE,IAAA,UAAU,EAAC,QALb;AAME,IAAA,CAAC,EAAC,MANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGH,KAAK,CAACW,MAAN,CACC,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KACEA,CAAC,KAAKL,SAAN,GAAkBG,CAAC,CAACG,MAAF,CAASF,CAAC,CAACP,KAAX,CAAlB,GAAsCM,CAAC,CAACG,MAAF,CAASF,CAAC,CAACP,KAAX,EAAkB,IAAlB,CAFzC,EAGC,EAHD,CARH,CAXJ,CAZF,EAuCE,MAAC,gBAAD;AAAkB,IAAA,OAAO,EAAC,MAA1B;AAAiC,IAAA,KAAK,EAAC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvCF,CADF;AA2CD,CA7CD;;AAyDA,MAAMU,gBAAgB,GAAIC,OAAD,IACvBA,OAAO,CAACC,YAAR,GAAuBD,OAAO,CAACE,YADjC;;AAGA,MAAMC,YAA+D,GACnEC,UADsE,IAEnE,CAAC;AAAErB,EAAAA,KAAF;AAASM,EAAAA;AAAT,CAAD,KACHA,KAAK,CAACgB,WAAN,GAAoBC,QAApB,CAA6BF,UAA7B,KACArB,KAAK,CAACsB,WAAN,GAAoBC,QAApB,CAA6BF,UAA7B,CAJF;;AAMA,MAAMG,aAA2C,GAAG,CAAC;AACnDxB,EAAAA,KAAK,EAAEyB,aAD4C;AAEnDC,EAAAA,QAFmD;AAGnDC,EAAAA,OAAO,EAAEC,UAH0C;AAInDjC,EAAAA,MAJmD;AAKnDkC,EAAAA,OAAO,GAAG,IALyC;AAMnDC,EAAAA,UAAU,GAAG,KANsC;AAOnDC,EAAAA,UAAU,GAAG;AAPsC,CAAD,KAQ9C;AACJ,QAAMC,gBAAgB,GAAG9D,OAAO,CAC9B,MACE0D,UAAU,CAACzB,MAAX,GAAoB,CAApB,IAAyB,CAAC,CAAEyB,UAAD,CAAoC,CAApC,EAAuCD,OAFtC,EAG9B,CAACC,UAAD,CAH8B,CAAhC;AAKA,QAAM;AAAA,OAAC5B,KAAD;AAAA,OAAQiC;AAAR,MAAoB7D,QAAQ,CAACqD,aAAD,CAAlC;AACA,QAAMS,OAAO,GAAGlE,WAAW,CAAC,MAAM;AAChCiE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAF0B,EAExB,EAFwB,CAA3B;AAGA,QAAME,MAAM,GAAGnE,WAAW,CAAC,MAAM;AAC/B0D,IAAAA,QAAQ,CAAC1B,KAAD,CAAR;AACAL,IAAAA,MAAM;AACP,GAHyB,EAGvB,CAACK,KAAD,EAAQ0B,QAAR,EAAkB/B,MAAlB,CAHuB,CAA1B;AAIA,QAAM;AAAA,OAACgC,OAAD;AAAA,OAAUS;AAAV,MAAwBhE,QAAQ,CAACwD,UAAD,CAAtC;AAEA,QAAM;AAAA,OAACS,MAAD;AAAA,OAASC;AAAT,MAAsBlE,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMmE,QAAQ,GAAGvE,WAAW,CACzBqD,UAAD,IAAwB;AACtB,QAAI,CAACA,UAAL,EAAiB;AACfe,MAAAA,UAAU,CAACR,UAAD,CAAV;AACD;;AACD,QAAIY,iBAA2B,GAAG,EAAlC;;AACA,QAAIT,UAAJ,EAAgB;AACdS,MAAAA,iBAAiB,GAAGhF,eAAe,CAAC6D,UAAD,CAAnC;AACD;;AACD,QAAIW,gBAAJ,EAAsB;AACpB,YAAMS,UAA+B,GAAIb,UAAD,CAAoCjB,MAApC,CACtC,CAACC,CAAD,EAAyBC,CAAzB,KAAkD;AAChD,cAAM;AAAEP,UAAAA,KAAF;AAASqB,UAAAA,OAAO,EAAEe;AAAlB,YAAsC7B,CAA5C;AACA,cAAM8B,eAAe,GAAGZ,UAAU,GAC7BW,eAAD,CAAoCE,MAApC,CACEtF,eAAe,CAAC+D,UAAD,EAAamB,iBAAb,CADjB,CAD8B,GAI9BE,eAAe,CAACE,MAAhB,CAAuBxB,YAAY,CAACC,UAAD,CAAnC,CAJJ;AAKA,cAAMwB,QAA2B,GAAG;AAClCvC,UAAAA,KADkC;AAElCqB,UAAAA,OAAO,EAAEgB;AAFyB,SAApC;AAIA,eAAOF,UAAU,CAACtC,MAAX,GAAoB,CAApB,GAAwB,CAAC,GAAGS,CAAJ,EAAOiC,QAAP,CAAxB,GAA2CjC,CAAlD;AACD,OAbqC,EActC,EAdsC,CAAxC;AAgBAwB,MAAAA,UAAU,CAACK,UAAD,CAAV;AACD,KAlBD,MAkBO;AACL,YAAME,eAAe,GAAGZ,UAAU,GAC7BH,UAAD,CAA+BgB,MAA/B,CACEtF,eAAe,CAAC+D,UAAD,EAAamB,iBAAb,CADjB,CAD8B,GAI7BZ,UAAD,CAA4BgB,MAA5B,CAAmCxB,YAAY,CAACC,UAAD,CAA/C,CAJJ;AAKAe,MAAAA,UAAU,CAACO,eAAD,CAAV;AACD;AACF,GAnCyB,EAoC1B,CAACf,UAAD,EAAaI,gBAAb,EAA+BD,UAA/B,CApC0B,CAA5B;AAuCA,QAAMe,aAAa,GAAG9E,WAAW,CAC9B+E,eAAD,IAAkC;AAChC,UAAMtC,SAAS,GAAGsC,eAAe,CAAC5C,MAAhB,GAAyB,CAA3C;AACA,WACE,4BACG4C,eAAe,CAAC3C,GAAhB,CAAoB,CAAC4C,MAAD,EAAoBC,KAApB,KAAsC;AACzD,YAAM;AAAEjD,QAAAA,KAAK,EAAEkD,WAAT;AAAsB5C,QAAAA;AAAtB,UAAgC0C,MAAtC;AACA,YAAMG,UAAU,GAAGnD,KAAK,CAACW,MAAN,CACjB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAAC,CAACb,KAAF,KAAYkD,WADV,EAEjB,KAFiB,CAAnB;AAIA,aACE,MAAC,IAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,MAAM,EAAC,SAFT;AAGE,QAAA,MAAM,EAAE;AAAExC,UAAAA,EAAE,EAAE;AAAN,SAHV;AAIE,QAAA,GAAG,EAAEwC,WAJP;AAKE,QAAA,OAAO,EAAE,MAAM;AACb,cAAIrB,OAAJ,EAAa;AACX,gBAAIsB,UAAJ,EAAgB;AACd,oBAAMN,QAAQ,GAAG7C,KAAK,CAACO,KAAN,EAAjB;AACAsC,cAAAA,QAAQ,CAACO,MAAT,CAAgBpD,KAAK,CAACqD,OAAN,CAAcL,MAAd,CAAhB,EAAuC,CAAvC;AACAf,cAAAA,QAAQ,CAACY,QAAD,CAAR;AACD,aAJD,MAIO;AACL,oBAAMA,QAAQ,GAAG7C,KAAK,CAACO,KAAN,EAAjB;AACAsC,cAAAA,QAAQ,CAACS,IAAT,CAAcN,MAAd;AACAf,cAAAA,QAAQ,CAACY,QAAD,CAAR;AACD;AACF,WAVD,MAUO;AACLZ,YAAAA,QAAQ,CAACkB,UAAU,GAAG,EAAH,GAAQ,CAACH,MAAD,CAAnB,CAAR;AACD;AACF,SAnBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAqBE,MAAC,IAAD;AACE,QAAA,CAAC,EAAC,MADJ;AAEE,QAAA,CAAC,EAAC,MAFJ;AAGE,QAAA,EAAE,EAAC,GAHL;AAIE,QAAA,OAAO,EAAC,eAJV;AAKE,QAAA,KAAK,EAAC,QALR;AAME,QAAA,YAAY,EAAEvC,SAAS,KAAKwC,KAAd,GAAsB,GAAtB,GAA4B,WAN5C;AAOE,QAAA,iBAAiB,EAAC,cAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASE,MAAC,IAAD;AAAM,QAAA,UAAU,EAAC,MAAjB;AAAwB,QAAA,QAAQ,EAAC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG3C,KADH,CATF,EAYG6C,UAAU,IACT,MAAC,SAAD;AAAW,QAAA,KAAK,EAAC,OAAjB;AAAyB,QAAA,OAAO,EAAC,SAAjC;AAA2C,QAAA,EAAE,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,CArBF,CADF;AAwCD,KA9CA,CADH,CADF;AAmDD,GAtD8B,EAuD/B,CAACtB,OAAD,EAAU7B,KAAV,CAvD+B,CAAjC;AA0DA,QAAM;AAAA,OAACuD,YAAD;AAAA,OAAeC;AAAf,MAAkCpF,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMqF,OAAO,GAAGtF,MAAM,CAAwB,IAAxB,CAAtB;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwF,OAAO,CAACC,OAAZ,EAAqB;AACnBF,MAAAA,eAAe,CAACxC,gBAAgB,CAACyC,OAAO,CAACC,OAAT,CAAjB,CAAf;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE,4BACG5B,UAAU,IACT,MAAC,IAAD;AACE,IAAA,CAAC,EAAC,MADJ;AAEE,IAAA,iBAAiB,EAAC,KAFpB;AAGE,IAAA,iBAAiB,EAAC,cAHpB;AAIE,IAAA,iBAAiB,EAAC,OAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,KAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,KAAK,EAAC,mBAFR;AAGE,IAAA,WAAW,EAAC,WAHd;AAIE,IAAA,YAAY,EAAE;AAAE6B,MAAAA,KAAK,EAAE;AAAT,KAJhB;AAKE,IAAA,YAAY,EAAC,GALf;AAME,IAAA,WAAW,EAAC,KANd;AAOE,IAAA,EAAE,EAAC,GAPL;AAQE,IAAA,EAAE,EAAC,GARL;AASE,IAAA,WAAW,EAAC,cATd;AAUE,IAAA,QAAQ,EAAGC,CAAD,IAAO;AACf,YAAMC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAAS9D,KAA5B;AACAsC,MAAAA,SAAS,CAACuB,UAAD,CAAT;AACAtB,MAAAA,QAAQ,CAACsB,UAAU,CAACvC,WAAX,GAAyByC,IAAzB,EAAD,CAAR;AACD,KAdH;AAeE,IAAA,KAAK,EAAE1B,MAfT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAFJ,EA2BE,MAAC,UAAD;AACE,IAAA,CAAC,EAAC,GADJ;AAEE,IAAA,GAAG,EAAEoB,OAFP;AAGE,IAAA,YAAY,EAAEF,YAAY,GAAG,WAAH,GAAiB,GAH7C;AAIE,IAAA,iBAAiB,EAAC,cAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,IAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,YAAY,EAAEA,YAAY,GAAG,GAAH,GAAS,WAFrC;AAGE,IAAA,iBAAiB,EAAC,cAHpB;AAIE,IAAA,QAAQ,EAAC,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGvB,gBAAgB,GACZL,OAAD,CAAiCvB,GAAjC,CACE,CAAC;AAAEE,IAAAA,KAAF;AAASqB,IAAAA,OAAO,EAAEe;AAAlB,GAAD,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAyB,IAAA,GAAG,EAAEpC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AACE,IAAA,CAAC,EAAC,MADJ;AAEE,IAAA,CAAC,EAAC,MAFJ;AAGE,IAAA,OAAO,EAAC,eAHV;AAIE,IAAA,KAAK,EAAC,QAJR;AAKE,IAAA,EAAE,EAAExC,WAAW,CAACwC,KAAD,CALjB;AAME,IAAA,QAAQ,EAAC,QANX;AAOE,IAAA,GAAG,EAAC,GAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,QAAQ,EAAC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KADH,CATF,CADF,EAcGwC,aAAa,CAACJ,eAAD,CAdhB,CAFJ,CADa,GAqBbI,aAAa,CAACnB,OAAD,CA3BnB,CANF,CA3BF,EA+DE,MAAC,YAAD;AAAc,IAAA,CAAC,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAyB,IAAA,OAAO,EAAC,QAAjC;AAA0C,IAAA,CAAC,EAAC,MAA5C;AAAmD,IAAA,KAAK,EAAC,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,KAAK,CAACG,MAAN,GAAe,CAAf,IACC,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,OAAO,EAAE+B,OAHX;AAIE,IAAA,IAAI,EAAC,IAJP;AAKE,IAAA,IAAI,EAAC,QALP;AAME,IAAA,CAAC,EAAC,GANJ;AAOE,IAAA,EAAE,EAAC,MAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,EAcE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAEC,MAArB;AAA6B,IAAA,CAAC,EAAC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,CADF,CA/DF,CADF;AAsFD,CAzND","sourcesContent":["import {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  Button,\n  CheckIcon,\n  CloseIcon,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  filterTimezones,\n  Flex,\n  FlexProps,\n  getTimezonesFor,\n  IconButton,\n  Input,\n  MetaButton,\n  Text,\n  TimezoneOptions,\n  TimezoneType,\n} from '@raidguild/ds';\nimport { SkillCategory_Enum } from 'graphql/autogen/types';\nimport { SkillColors } from 'graphql/types';\nimport { PlayerAggregates } from 'lib/hooks/players';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { SkillOption } from 'utils/skillHelpers';\n\ntype ValueType = { value: string; label: string };\ntype CategoryValueType = {\n  label: string;\n  options: ValueType[];\n};\n\ntype Props = {\n  aggregates: PlayerAggregates;\n  skills: SkillOption[];\n  setSkills: React.Dispatch<React.SetStateAction<SkillOption[]>>;\n  playerTypes: ValueType[];\n  setPlayerTypes: React.Dispatch<React.SetStateAction<ValueType[]>>;\n  timezones: ValueType[];\n  setTimezones: React.Dispatch<React.SetStateAction<ValueType[]>>;\n  availability: ValueType | null;\n  setAvailability: React.Dispatch<React.SetStateAction<ValueType | null>>;\n  isOpen: boolean;\n  onClose: () => void;\n  filtersUsed: boolean;\n  resetAllFilters: () => void;\n};\n\nenum Selected {\n  NONE,\n  PLAYER_TYPE,\n  SKILLS,\n  AVAILABILITY,\n  TIME_ZONE,\n}\n\nexport const MobileFilters: React.FC<Props> = ({\n  aggregates,\n  skills,\n  setSkills,\n  playerTypes,\n  setPlayerTypes,\n  timezones,\n  setTimezones,\n  availability,\n  setAvailability,\n  isOpen,\n  onClose: closeDrawer,\n  filtersUsed,\n  resetAllFilters,\n  ...props\n}) => {\n  const [title, setTitle] = useState('Filter');\n  const [selected, setSelected] = useState<Selected>(Selected.NONE);\n\n  const onBack = useCallback(() => {\n    setSelected(Selected.NONE);\n  }, []);\n  const onClose = useCallback(() => {\n    setSelected(Selected.NONE);\n    closeDrawer();\n  }, [closeDrawer]);\n\n  useEffect(() => {\n    switch (selected) {\n      case Selected.PLAYER_TYPE:\n        setTitle('Type of Player');\n        return;\n      case Selected.SKILLS:\n        setTitle('Skills');\n        return;\n      case Selected.AVAILABILITY:\n        setTitle('Availability');\n        return;\n      case Selected.TIME_ZONE:\n        setTitle('Time Zone');\n        return;\n      case Selected.NONE:\n      default:\n        setTitle('Filter');\n    }\n  }, [selected]);\n\n  return (\n    <Drawer isOpen={isOpen} onClose={onClose} {...props}>\n      <DrawerContent maxW=\"100%\" bg=\"black\" color=\"white\">\n        <DrawerHeader\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          p=\"0.5rem\"\n          borderBottom=\"1px solid\"\n          borderBottomColor=\"borderPurple\"\n        >\n          {selected !== Selected.NONE ? (\n            <IconButton\n              p=\"1\"\n              variant=\"link\"\n              colorScheme=\"white\"\n              icon={<ArrowBackIcon boxSize=\"2rem\" />}\n              onClick={onBack}\n              aria-label=\"Clear Search\"\n            />\n          ) : (\n            <Flex w=\"2.5rem\" />\n          )}\n          <Text textTransform=\"uppercase\" fontWeight=\"bold\" fontSize=\"md\">\n            {title}\n          </Text>\n          <IconButton\n            py=\"3\"\n            variant=\"link\"\n            colorScheme=\"white\"\n            icon={<CloseIcon boxSize=\"1rem\" />}\n            onClick={onClose}\n            aria-label=\"Clear Search\"\n          />\n        </DrawerHeader>\n        {selected === Selected.NONE && (\n          <>\n            <DrawerBody p=\"0\">\n              <FilterItem\n                title=\"Type Of Player\"\n                onClick={() => setSelected(Selected.PLAYER_TYPE)}\n                value={playerTypes}\n              />\n              <FilterItem\n                title=\"Skills\"\n                onClick={() => setSelected(Selected.SKILLS)}\n                value={skills as ValueType[]}\n              />\n              <FilterItem\n                title=\"Availability\"\n                onClick={() => setSelected(Selected.AVAILABILITY)}\n                value={availability ? [availability] : []}\n              />\n              <FilterItem\n                title=\"Time Zone\"\n                onClick={() => setSelected(Selected.TIME_ZONE)}\n                value={timezones}\n              />\n            </DrawerBody>\n            <DrawerFooter p=\"1.5rem\">\n              <Flex direction=\"column\" justify=\"center\" w=\"100%\" align=\"center\">\n                {filtersUsed && (\n                  <Button\n                    variant=\"link\"\n                    color=\"cyan.400\"\n                    onClick={resetAllFilters}\n                    size=\"sm\"\n                    minH=\"2.5rem\"\n                    p=\"2\"\n                    mb=\"1rem\"\n                  >\n                    RESET ALL FILTERS\n                  </Button>\n                )}\n                <MetaButton onClick={onClose} w=\"15rem\">\n                  SHOW RESULTS\n                </MetaButton>\n              </Flex>\n            </DrawerFooter>\n          </>\n        )}\n        {selected === Selected.PLAYER_TYPE && (\n          <FilterContent\n            value={playerTypes}\n            onChange={(value) => {\n              setPlayerTypes(value as ValueType[]);\n            }}\n            options={aggregates.playerTypes}\n            onBack={onBack}\n          />\n        )}\n        {selected === Selected.SKILLS && (\n          <FilterContent\n            value={skills as ValueType[]}\n            onChange={(value) => {\n              setSkills(value as SkillOption[]);\n            }}\n            options={aggregates.skillChoices as CategoryValueType[]}\n            onBack={onBack}\n            showSearch\n          />\n        )}\n        {selected === Selected.AVAILABILITY && (\n          <FilterContent\n            value={availability ? [availability] : []}\n            onChange={(value) => {\n              const values = value as ValueType[];\n              setAvailability(values[values.length - 1]);\n            }}\n            options={[1, 5, 10, 20, 30, 40].map((value) => ({\n              value: value.toString(),\n              label: `> ${value.toString()} h/week`,\n            }))}\n            onBack={onBack}\n            isMulti={false}\n          />\n        )}\n        {selected === Selected.TIME_ZONE && (\n          <FilterContent\n            value={timezones}\n            onChange={(value) => {\n              const values = value as ValueType[];\n              setTimezones(values.slice(-1));\n            }}\n            options={TimezoneOptions}\n            onBack={onBack}\n            isMulti={false}\n            showSearch\n            isTimezone\n          />\n        )}\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\ntype FilterItemProps = {\n  title: string;\n  value: ValueType[];\n} & FlexProps;\n\nconst FilterItem: React.FC<FilterItemProps> = ({ title, value, ...props }) => {\n  const lastIndex = value.length - 1;\n  return (\n    <Flex\n      justify=\"space-between\"\n      align=\"center\"\n      p=\"1rem\"\n      pr=\"0.75rem\"\n      borderBottom=\"1px solid\"\n      borderBottomColor=\"borderPurple\"\n      cursor=\"pointer\"\n      _hover={{ bg: 'whiteAlpha.100' }}\n      w=\"100%\"\n      {...props}\n    >\n      <Flex\n        direction=\"column\"\n        align=\"flex-start\"\n        w=\"100%\"\n        overflow=\"hidden\"\n        mr=\"1rem\"\n      >\n        <Text fontWeight=\"bold\" fontSize=\"md\">\n          {title}\n        </Text>\n        {value.length > 0 && (\n          <Text\n            fontWeight=\"300\"\n            fontSize=\"sm\"\n            textOverflow=\"ellipsis\"\n            overflow=\"hidden\"\n            whiteSpace=\"nowrap\"\n            w=\"100%\"\n          >\n            {value.reduce(\n              (t, v, i) =>\n                i === lastIndex ? t.concat(v.label) : t.concat(v.label, ', '),\n              '',\n            )}\n          </Text>\n        )}\n      </Flex>\n      <ArrowForwardIcon boxSize=\"2rem\" color=\"white\" />\n    </Flex>\n  );\n};\n\ntype FilterContentProps = {\n  value: ValueType[];\n  onChange: (value: ValueType[]) => void;\n  options: ValueType[] | CategoryValueType[];\n  onBack: () => void;\n  isMulti?: boolean;\n  showSearch?: boolean;\n  isTimezone?: boolean;\n};\n\nconst scrollbarVisible = (element: HTMLDivElement): boolean =>\n  element.scrollHeight > element.clientHeight;\n\nconst searchFilter: (searchText: string) => (v: ValueType) => boolean = (\n  searchText,\n) => ({ value, label }) =>\n  label.toLowerCase().includes(searchText) ||\n  value.toLowerCase().includes(searchText);\n\nconst FilterContent: React.FC<FilterContentProps> = ({\n  value: selectedValue,\n  onChange,\n  options: allOptions,\n  onBack,\n  isMulti = true,\n  showSearch = false,\n  isTimezone = false,\n}) => {\n  const isCategoryFilter = useMemo(\n    () =>\n      allOptions.length > 0 && !!(allOptions as CategoryValueType[])[0].options,\n    [allOptions],\n  );\n  const [value, setValue] = useState(selectedValue);\n  const onClear = useCallback(() => {\n    setValue([]);\n  }, []);\n  const onSave = useCallback(() => {\n    onChange(value);\n    onBack();\n  }, [value, onChange, onBack]);\n  const [options, setOptions] = useState(allOptions);\n\n  const [search, setSearch] = useState('');\n\n  const onSearch = useCallback(\n    (searchText: string) => {\n      if (!searchText) {\n        setOptions(allOptions);\n      }\n      let filteredTimezones: string[] = [];\n      if (isTimezone) {\n        filteredTimezones = getTimezonesFor(searchText);\n      }\n      if (isCategoryFilter) {\n        const newOptions: CategoryValueType[] = (allOptions as CategoryValueType[]).reduce(\n          (t: CategoryValueType[], v: CategoryValueType) => {\n            const { label, options: categoryOptions } = v;\n            const filteredOptions = isTimezone\n              ? (categoryOptions as TimezoneType[]).filter(\n                  filterTimezones(searchText, filteredTimezones),\n                )\n              : categoryOptions.filter(searchFilter(searchText));\n            const newValue: CategoryValueType = {\n              label,\n              options: filteredOptions,\n            };\n            return newOptions.length > 0 ? [...t, newValue] : t;\n          },\n          [],\n        );\n        setOptions(newOptions);\n      } else {\n        const filteredOptions = isTimezone\n          ? (allOptions as TimezoneType[]).filter(\n              filterTimezones(searchText, filteredTimezones),\n            )\n          : (allOptions as ValueType[]).filter(searchFilter(searchText));\n        setOptions(filteredOptions);\n      }\n    },\n    [allOptions, isCategoryFilter, isTimezone],\n  );\n\n  const renderOptions = useCallback(\n    (optionsToRender: ValueType[]) => {\n      const lastIndex = optionsToRender.length - 1;\n      return (\n        <>\n          {optionsToRender.map((option: ValueType, index: number) => {\n            const { value: optionValue, label } = option;\n            const isSelected = value.reduce(\n              (t, v) => t || v.value === optionValue,\n              false,\n            );\n            return (\n              <Flex\n                pl=\"1rem\"\n                cursor=\"pointer\"\n                _hover={{ bg: 'whiteAlpha.100' }}\n                key={optionValue}\n                onClick={() => {\n                  if (isMulti) {\n                    if (isSelected) {\n                      const newValue = value.slice();\n                      newValue.splice(value.indexOf(option), 1);\n                      setValue(newValue);\n                    } else {\n                      const newValue = value.slice();\n                      newValue.push(option);\n                      setValue(newValue);\n                    }\n                  } else {\n                    setValue(isSelected ? [] : [option]);\n                  }\n                }}\n              >\n                <Flex\n                  w=\"100%\"\n                  p=\"1rem\"\n                  pl=\"0\"\n                  justify=\"space-between\"\n                  align=\"center\"\n                  borderBottom={lastIndex === index ? '0' : '1px solid'}\n                  borderBottomColor=\"borderPurple\"\n                >\n                  <Text fontWeight=\"bold\" fontSize=\"md\">\n                    {label}\n                  </Text>\n                  {isSelected && (\n                    <CheckIcon color=\"white\" boxSize=\"1.25rem\" mr=\"0.1rem\" />\n                  )}\n                </Flex>\n              </Flex>\n            );\n          })}\n        </>\n      );\n    },\n    [isMulti, value],\n  );\n\n  const [hasScrollbar, setHasScrollbar] = useState(false);\n  const bodyRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if (bodyRef.current) {\n      setHasScrollbar(scrollbarVisible(bodyRef.current));\n    }\n  }, []);\n\n  return (\n    <>\n      {showSearch && (\n        <Flex\n          w=\"100%\"\n          borderBottomWidth=\"1px\"\n          borderBottomColor=\"borderPurple\"\n          borderBottomStyle=\"solid\"\n        >\n          <Input\n            autoFocus\n            width=\"calc(100% - 2rem)\"\n            placeholder=\"Search...\"\n            _placeholder={{ color: 'whiteAlpha.500' }}\n            borderRadius=\"0\"\n            borderWidth=\"2px\"\n            mx=\"4\"\n            my=\"2\"\n            borderColor=\"borderPurple\"\n            onChange={(e) => {\n              const inputValue = e.target.value;\n              setSearch(inputValue);\n              onSearch(inputValue.toLowerCase().trim());\n            }}\n            value={search}\n          />\n        </Flex>\n      )}\n      <DrawerBody\n        p=\"0\"\n        ref={bodyRef}\n        borderBottom={hasScrollbar ? '1px solid' : '0'}\n        borderBottomColor=\"borderPurple\"\n      >\n        <Flex\n          direction=\"column\"\n          borderBottom={hasScrollbar ? '0' : '1px solid'}\n          borderBottomColor=\"borderPurple\"\n          position=\"relative\"\n        >\n          {isCategoryFilter\n            ? (options as CategoryValueType[]).map(\n                ({ label, options: categoryOptions }) => (\n                  <Flex direction=\"column\" key={label}>\n                    <Flex\n                      w=\"100%\"\n                      p=\"1rem\"\n                      justify=\"space-between\"\n                      align=\"center\"\n                      bg={SkillColors[label as SkillCategory_Enum]}\n                      position=\"sticky\"\n                      top=\"0\"\n                    >\n                      <Text fontWeight=\"bold\" fontSize=\"md\">\n                        {label}\n                      </Text>\n                    </Flex>\n                    {renderOptions(categoryOptions)}\n                  </Flex>\n                ),\n              )\n            : renderOptions(options as ValueType[])}\n        </Flex>\n      </DrawerBody>\n      <DrawerFooter p=\"1.5rem\">\n        <Flex direction=\"column\" justify=\"center\" w=\"100%\" align=\"center\">\n          {value.length > 0 && (\n            <Button\n              variant=\"link\"\n              color=\"cyan.400\"\n              onClick={onClear}\n              size=\"sm\"\n              minH=\"2.5rem\"\n              p=\"2\"\n              mb=\"1rem\"\n            >\n              CANCEL SELECTION\n            </Button>\n          )}\n          <MetaButton onClick={onSave} w=\"15rem\">\n            SAVE\n          </MetaButton>\n        </Flex>\n      </DrawerFooter>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}