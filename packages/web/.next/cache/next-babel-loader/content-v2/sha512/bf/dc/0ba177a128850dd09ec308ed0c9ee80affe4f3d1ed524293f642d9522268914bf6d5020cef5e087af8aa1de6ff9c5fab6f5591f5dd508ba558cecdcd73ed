{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Setup/SetupAvailability.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Input, InputGroup, InputLeftElement, InputRightAddon, MetaButton, MetaHeading, Text, useToast } from '@raidguild/ds';\nimport { FlexContainer } from 'components/Container';\nimport { useSetupFlow } from 'contexts/SetupContext';\nimport { useUpdateProfileMutation } from 'graphql/autogen/types';\nimport { useUser } from 'lib/hooks';\nimport React, { useEffect, useState } from 'react';\nexport var SetupAvailability = function SetupAvailability(_ref) {\n  _s();\n\n  var availability = _ref.availability,\n      setAvailability = _ref.setAvailability;\n\n  var _useSetupFlow = useSetupFlow(),\n      onNextPress = _useSetupFlow.onNextPress,\n      nextButtonLabel = _useSetupFlow.nextButtonLabel;\n\n  var _useState = useState(false),\n      invalid = _useState[0],\n      setInvalid = _useState[1];\n\n  var _useUser = useUser({\n    redirectTo: '/'\n  }),\n      user = _useUser.user;\n\n  var toast = useToast();\n  useEffect(function () {\n    var value = Number(availability);\n    setInvalid(value < 0 || value > 168);\n  }, [availability]);\n\n  var _useUpdateProfileMuta = useUpdateProfileMutation(),\n      _useUpdateProfileMuta2 = _slicedToArray(_useUpdateProfileMuta, 2),\n      updateProfileRes = _useUpdateProfileMuta2[0],\n      updateProfile = _useUpdateProfileMuta2[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var handleNextPress = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$updateProfile, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (user) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              setLoading(true);\n              _context.next = 5;\n              return updateProfile({\n                playerId: user.id,\n                input: {\n                  availability_hours: Number(availability)\n                }\n              });\n\n            case 5:\n              _yield$updateProfile = _context.sent;\n              error = _yield$updateProfile.error;\n\n              if (!error) {\n                _context.next = 11;\n                break;\n              }\n\n              toast({\n                title: 'Error',\n                description: 'Unable to update availability. The octo is sad ðŸ˜¢',\n                status: 'error',\n                isClosable: true\n              });\n              setLoading(false);\n              return _context.abrupt(\"return\");\n\n            case 11:\n              onNextPress();\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleNextPress() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(FlexContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(MetaHeading, {\n    mb: 5,\n    textAlign: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Avail\\xADability\"), __jsx(Text, {\n    mb: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"What is your weekly availability for any kind of freelance work?\"), __jsx(InputGroup, {\n    borderColor: \"transparent\",\n    mb: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(InputLeftElement, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"clock\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDD5B\")), __jsx(Input, {\n    background: \"dark\",\n    placeholder: \"40\",\n    type: \"number\",\n    value: availability,\n    onChange: function onChange(e) {\n      return setAvailability(e.target.value);\n    },\n    isInvalid: invalid,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), __jsx(InputRightAddon, {\n    background: \"purpleBoxDark\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"hr/week\")), __jsx(MetaButton, {\n    onClick: handleNextPress,\n    mt: 10,\n    isDisabled: invalid,\n    isLoading: updateProfileRes.fetching || loading,\n    loadingText: \"Saving\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, nextButtonLabel));\n};\n\n_s(SetupAvailability, \"sPyAxNhzin//p/QkPEfZijFPQCw=\", false, function () {\n  return [useSetupFlow, useUser, useToast, useUpdateProfileMutation];\n});\n\n_c = SetupAvailability;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetupAvailability\");","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/components/Setup/SetupAvailability.tsx"],"names":["Input","InputGroup","InputLeftElement","InputRightAddon","MetaButton","MetaHeading","Text","useToast","FlexContainer","useSetupFlow","useUpdateProfileMutation","useUser","React","useEffect","useState","SetupAvailability","availability","setAvailability","onNextPress","nextButtonLabel","invalid","setInvalid","redirectTo","user","toast","value","Number","updateProfileRes","updateProfile","loading","setLoading","handleNextPress","playerId","id","input","availability_hours","error","title","description","status","isClosable","e","target","fetching"],"mappings":"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","sourcesContent":["import {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightAddon,\n  MetaButton,\n  MetaHeading,\n  Text,\n  useToast,\n} from '@raidguild/ds';\nimport { FlexContainer } from 'components/Container';\nimport { useSetupFlow } from 'contexts/SetupContext';\nimport { useUpdateProfileMutation } from 'graphql/autogen/types';\nimport { useUser } from 'lib/hooks';\nimport React, { useEffect, useState } from 'react';\n\nexport type SetupAvailabilityProps = {\n  availability: string;\n  setAvailability: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const SetupAvailability: React.FC<SetupAvailabilityProps> = ({\n  availability,\n  setAvailability,\n}) => {\n  const { onNextPress, nextButtonLabel } = useSetupFlow();\n\n  const [invalid, setInvalid] = useState(false);\n  const { user } = useUser({ redirectTo: '/' });\n  const toast = useToast();\n\n  useEffect(() => {\n    const value = Number(availability);\n    setInvalid(value < 0 || value > 168);\n  }, [availability]);\n\n  const [updateProfileRes, updateProfile] = useUpdateProfileMutation();\n  const [loading, setLoading] = useState(false);\n\n  const handleNextPress = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    const { error } = await updateProfile({\n      playerId: user.id,\n      input: {\n        availability_hours: Number(availability),\n      },\n    });\n\n    if (error) {\n      toast({\n        title: 'Error',\n        description: 'Unable to update availability. The octo is sad ðŸ˜¢',\n        status: 'error',\n        isClosable: true,\n      });\n      setLoading(false);\n      return;\n    }\n\n    onNextPress();\n  };\n\n  return (\n    <FlexContainer>\n      <MetaHeading mb={5} textAlign=\"center\">\n        Avail&#xAD;ability\n      </MetaHeading>\n      <Text mb={10}>\n        What is your weekly availability for any kind of freelance work?\n      </Text>\n      <InputGroup borderColor=\"transparent\" mb={10}>\n        <InputLeftElement>\n          <span role=\"img\" aria-label=\"clock\">\n            ðŸ•›\n          </span>\n        </InputLeftElement>\n        <Input\n          background=\"dark\"\n          placeholder=\"40\"\n          type=\"number\"\n          value={availability}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setAvailability(e.target.value)\n          }\n          isInvalid={invalid}\n        />\n        <InputRightAddon background=\"purpleBoxDark\">hr/week</InputRightAddon>\n      </InputGroup>\n\n      <MetaButton\n        onClick={handleNextPress}\n        mt={10}\n        isDisabled={invalid}\n        isLoading={updateProfileRes.fetching || loading}\n        loadingText=\"Saving\"\n      >\n        {nextButtonLabel}\n      </MetaButton>\n    </FlexContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}